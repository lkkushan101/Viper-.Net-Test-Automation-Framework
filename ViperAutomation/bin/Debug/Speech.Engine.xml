<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Speech.Engine</name>
    </assembly>
    <members>
        <member name="T:Speech.Data.SpeechAttachDataAttribute">
            <summary>
            附加数据属性
            </summary>
        </member>
        <member name="M:Speech.Data.SpeechAttachDataExtensions.GetAttachText(System.Enum)">
            <summary>
            获得枚举类型的注释
            </summary>
            <param name="enumObject"></param>
            <returns></returns>
        </member>
        <member name="T:Speech.Data.AudioChannel">
            <summary>
            通话语音的类型
            <para>共有四种类型: 单声道双边音,单声道单边音,立体声双边音,立体声单边音</para>
            </summary>
        </member>
        <member name="F:Speech.Data.AudioChannel.MonoMultiSpeaker">
            <summary>
            单声道双边音
            </summary>
        </member>
        <member name="F:Speech.Data.AudioChannel.MonoSingleSpeaker">
            <summary>
            单声道单边音
            </summary>
        </member>
        <member name="F:Speech.Data.AudioChannel.StereoMultiSpeaker">
            <summary>
            立体声双边音
            </summary>
        </member>
        <member name="F:Speech.Data.AudioChannel.StereoSingleSpeaker">
            <summary>
            立体声单边音
            </summary>
        </member>
        <member name="T:Speech.Data.AudioFormatEx">
            <summary>
            音频格式扩展
            </summary>
        </member>
        <member name="M:Speech.Data.AudioFormatEx.GetDescString(Speech.Data.AudioFormat)">
            <summary>
            获取音频格式对应的字符串描述
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Data.AudioFormatEx.GetAudioTypeString(System.UInt16,System.UInt32)">
            <summary>
            根据 law类型,采样率获取引擎识别的音频格式
            </summary>
            <param name="law_num">音频主类型</param>
            <param name="sample">音频采样率</param>
            <returns>音频格式串</returns>
        </member>
        <member name="T:Speech.Data.AudioFormat">
            <summary>
            音频格式
            <para>A-law[6] U-law[7] PCM[1]</para>
            </summary>
        </member>
        <member name="F:Speech.Data.AudioFormat.Unknow">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Speech.Data.AudioFormat.A8k_U_law">
            <summary>
            格式为: 8k U-law
            </summary> 
        </member>
        <member name="F:Speech.Data.AudioFormat.A16k_U_law">
            <summary>
            格式为: 16K U-law
            </summary>
        </member>
        <member name="F:Speech.Data.AudioFormat.A8k_A_law">
            <summary>
            格式为: 8K A-law
            <para>audio/x-alaw-basic</para>
            </summary>
        </member>
        <member name="F:Speech.Data.AudioFormat.A16k_A_law">
            <summary>
            格式为: 16K A-law
            <para>audio/x-alaw-basic;rate=16000</para>
            </summary>
        </member>
        <member name="F:Speech.Data.AudioFormat.A8k_16bit_PCM">
            <summary>
            格式为: 8K 16bit PCM
            <para>audio/L16;rate=8000</para>
            </summary>
        </member>
        <member name="F:Speech.Data.AudioFormat.A16k_16bit_PCM">
            <summary>
            格式为: 16K 16bit PCM
            </summary>
        </member>
        <member name="F:Speech.Data.AudioFormat.A8K_4bit_Vox">
            <summary>
            格式为: 8K 4bit vox
            <para>audio/voxware</para>
            </summary>
        </member>
        <member name="T:Speech.Data.Gender">
            <summary>
            VSPP引擎识别出来的性别信息
            <para>相关的枚举值不要随意改动</para>
            </summary>
        </member>
        <member name="F:Speech.Data.Gender.Female">
            <summary>
            女
            </summary>
        </member>
        <member name="F:Speech.Data.Gender.Male">
            <summary>
             男
            </summary>
        </member>
        <member name="F:Speech.Data.Gender.UnKnown">
            <summary>
            未知
            </summary>
        </member>
        <member name="T:Speech.Data.SpeakerNum">
            <summary>
            说话人个数
            </summary>
        </member>
        <member name="T:Speech.Data.ContentItem">
            <summary>
            [引擎]从语音中识别出来的内容项;
            </summary>
        </member>
        <member name="M:Speech.Data.ContentItem.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Speech.Data.ContentItem.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="content">内容</param>
            <param name="startTime">开始时间</param>
            <param name="endTime">结束时间</param>
        </member>
        <member name="M:Speech.Data.ContentItem.Equals(System.Object)">
            <summary>
            相等比较
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Speech.Data.ContentItem.Content">
            <summary>
            得到的内容
            <para>可以是一个词或者一个句子</para>
            </summary>
        </member>
        <member name="P:Speech.Data.ContentItem.StartTime">
            <summary>
            内容在音频中的开始时间位置
            </summary>
        </member>
        <member name="P:Speech.Data.ContentItem.EndTime">
            <summary>
            内容在音频中的结束时间位置
            </summary>
        </member>
        <member name="T:Speech.Data.Sentence">
            <summary>
            识别出来的句子
            </summary>
        </member>
        <member name="M:Speech.Data.Sentence.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            句子构造函数
            </summary>
            <param name="content">内容</param>
            <param name="startTime">开始时间</param>
            <param name="endTime">结束时间</param>
        </member>
        <member name="M:Speech.Data.Sentence.GetKeywordList">
            <summary>
            此句子含有的所有关键词列表
            </summary>
            <returns></returns>
        </member>
        <member name="P:Speech.Data.Sentence.Words">
            <summary>
            句子中包含的关键词
            </summary>
        </member>
        <member name="M:Speech.Data.SentenceExtend.GetWordCountDict(System.Collections.Generic.List{Speech.Data.Sentence})">
            <summary>
            获取一批句子中每个词出现的次数 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Speech.Data.Word">
            <summary>
            音频包含的词
            </summary>
        </member>
        <member name="M:Speech.Data.Word.#ctor">
            <summary>
            音频包含的词
            </summary>
        </member>
        <member name="M:Speech.Data.Word.#ctor(System.String,System.Int32,System.Int32,System.Single)">
            <summary>
            词构造函数
            </summary>
            <param name="content">内容</param>
            <param name="startTime">开始时间</param>
            <param name="endTime">结束时间</param>
            <param name="confidence">置信度</param>
        </member>
        <member name="P:Speech.Data.Word.Confidence">
            <summary>
            置信度
            <para>根据现有评判规则-10~0是有效的</para>
            </summary>
        </member>
        <member name="T:Speech.Data.KwsSearchItem">
            <summary>
            [引擎]关键词检索结果项
            <para>包含： 语音KId，句子</para>
            </summary>
        </member>
        <member name="P:Speech.Data.KwsSearchItem.AudioId">
            <summary>
            语音KID
            </summary>
        </member>
        <member name="P:Speech.Data.KwsSearchItem.Sentences">
            <summary>
            语音检索结果
            </summary>
        </member>
        <member name="T:Speech.Data.LanguageType">
            <summary>
            语种类型
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.Chinese">
            <summary>
            中文
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.English">
            <summary>
            英语
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.Hindi">
            <summary>
            印地语
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.French">
            <summary>
            法语
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.Korean">
            <summary>
            韩语
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.Russian">
            <summary>
            俄语
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.Japanese">
            <summary>
            日语
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.German">
            <summary>
            德语
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.Spanish">
            <summary>
            西班牙语
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.Arabic">
            <summary>
            阿拉伯语
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.Burmese">
            <summary>
            缅甸语
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.Mandarin">
            <summary>
            普通话
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.Cantonese">
            <summary>
            粤语
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.Kazakh">
            <summary>
            哈萨克斯坦
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.Thai">
            <summary>
            泰语
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.Tibetan">
            <summary>
            西藏语
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.Ugur">
            <summary>
            ugur语
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.Vietnamese">
            <summary>
            越南语
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.Uighur">
            <summary>
            维吾尔语
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.Mongolian">
            <summary>
            蒙古语
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageType.ShortTime_UnKnown">
            <summary>
            未知
            </summary>
        </member>
        <member name="T:Speech.Data.LanguageTypeExtension">
            <summary>
            语种类型转换扩展
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageTypeExtension.languageDict">
            <summary>
            语种字典表
            </summary>
        </member>
        <member name="F:Speech.Data.LanguageTypeExtension.AllowIndexLangList">
            <summary>
            允许建Index 的语种列表
            </summary>
        </member>
        <member name="M:Speech.Data.LanguageTypeExtension.ToLanguageType(System.String)">
            <summary>
            将语种英文 转成  LanguageType 枚举类型
            </summary>
            <param name="languageName"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Data.LanguageTypeExtension.GetChinaDesc(Speech.Data.LanguageType)">
            <summary>
            china Desc
            </summary>
            <param name="languageName"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Data.LanguageTypeExtension.IsAllowIndex(System.String)">
            <summary>
            判定是否允许建立关键词索引
            </summary>
            <param name="languageName"></param>
            <returns>true| false</returns>
        </member>
        <member name="T:Speech.Data.RecWorkMode">
            <summary>
            NextG 识别模式
            </summary>
        </member>
        <member name="F:Speech.Data.RecWorkMode.RecPass1">
            <summary>
            一遍解码
            </summary>
        </member>
        <member name="F:Speech.Data.RecWorkMode.RecPass2">
            <summary>
            二遍解码
            </summary>
        </member>
        <member name="F:Speech.Data.RecWorkMode.Lattice">
            <summary>
            Lattice CN
            </summary>
        </member>
        <member name="T:Speech.Data.DecodeSegItem">
            <summary>
            NexG语音解码片段
            </summary>
        </member>
        <member name="M:Speech.Data.DecodeSegItem.#ctor">
            <summary>
            NexG语音解码片段
            </summary>
        </member>
        <member name="M:Speech.Data.DecodeSegItem.GetItemName">
            <summary>
            获取每项的名称
            </summary>
        </member>
        <member name="P:Speech.Data.DecodeSegItem.AudioId">
            <summary>
            关联语音ID
            </summary> 
        </member>
        <member name="P:Speech.Data.DecodeSegItem.LatticeId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Speech.Data.DecodeSegItem.BeginTime">
            <summary>
            段的开始时间
            <para>单位：毫秒</para>
            </summary>
        </member>
        <member name="P:Speech.Data.DecodeSegItem.EndTime">
            <summary>
            段的结束时间
            <para>单位：毫秒</para>
            </summary>
        </member>
        <member name="P:Speech.Data.DecodeSegItem.FeaBuffer">
            <summary>
            特征数据
            </summary>
        </member>
        <member name="P:Speech.Data.DecodeSegItem.FrameNum">
            <summary>
            帧长
            </summary>
        </member>
        <member name="T:Speech.Data.LatticeItem">
            <summary>
            LatticeItem
            </summary>
        </member>
        <member name="M:Speech.Data.LatticeItem.#ctor">
            <summary>
            LatticeItem
            </summary>
        </member>
        <member name="M:Speech.Data.LatticeItem.ToTestString(System.String)">
            <summary>
            生成效果评测字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:Speech.Data.LatticeItem.OneBestText">
            <summary>
            OneBestText 
            </summary>
        </member>
        <member name="P:Speech.Data.LatticeItem.CnText">
            <summary>
            CnText
            </summary>
        </member>
        <member name="T:Speech.Data.WaveInfo">
            <summary>
            语音信息
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.m_WaveData">
            <summary>
            数据流
            </summary>
        </member>
        <member name="M:Speech.Data.WaveInfo.#ctor(System.IO.Stream)">
            <summary>
            构造Wave信息
            </summary>
            <param name="WaveStream">语音流</param>
        </member>
        <member name="M:Speech.Data.WaveInfo.#ctor(System.String)">
            <summary>
            构造Wave信息
            </summary>
            <param name="WaveFileName">语音文件路径</param>
        </member>
        <member name="M:Speech.Data.WaveInfo.LoadWave">
            <summary>
            载入语音
            </summary>
        </member>
        <member name="M:Speech.Data.WaveInfo.GetWaveHeadLen(System.Byte[])">
            <summary>
            头文件长度=data标识出现的位置+4
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Data.WaveInfo.AjustAudioData(System.Byte[],System.Int64)">
            <summary>
            调整大小：超过一定大小的文件直接截断
            </summary>
            <param name="audioData">语音数据</param>
            <param name="ajustedDataSize">调整后的大小</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Data.WaveInfo.AjustAudioData(System.Byte[],System.Int64,System.Int64)">
            <summary>
            调整大小：超过一定大小的文件直接截断
            </summary>
            <param name="audioData">语音数据</param>
            <param name="startindex">数据开始的索引</param>
            <param name="ajustedDataSize">调整后的大小</param>
            <returns></returns>
        </member>
        <member name="P:Speech.Data.WaveInfo.WaveBool">
            <summary>
            是否成功打开文件
            </summary>
        </member>
        <member name="P:Speech.Data.WaveInfo.Second">
            <summary>
            秒单位
            </summary>
        </member>
        <member name="P:Speech.Data.WaveInfo.FormatTag">
            <summary>
            格式
            </summary>
        </member>
        <member name="P:Speech.Data.WaveInfo.Channels">
            <summary>
            频道
            </summary>
        </member>
        <member name="P:Speech.Data.WaveInfo.SamlesPerSec">
            <summary>
            采样级别
            </summary>
        </member>
        <member name="P:Speech.Data.WaveInfo.BitsPerSample">
            <summary>
            采样大小
            </summary>
        </member>
        <member name="T:Speech.Data.WaveInfo.RIFF_WAVE_Chunk">
            <summary>
            文件头
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.RIFF_WAVE_Chunk.szRiffID">
            <summary>
            文件前四个字节 为RIFF
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.RIFF_WAVE_Chunk.dwRiffSize">
            <summary>
            数据大小 这个数字等于+8 =文件大小
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.RIFF_WAVE_Chunk.szRiffFormat">
             <summary>
            WAVE文件定义 为WAVE
             </summary>
        </member>
        <member name="T:Speech.Data.WaveInfo.Format_Chunk">
            <summary>
            声音内容定义
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.Format_Chunk.ID">
            <summary>
            固定为  是"fmt "字后一位为0x20
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.Format_Chunk.Size">
            <summary>
            区域大小
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.Format_Chunk.FormatTag">
            <summary>
            记录着此声音的格式代号，例如1-WAVE_FORMAT_PCM， 2-WAVE_F0RAM_ADPCM等等。 
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.Format_Chunk.Channels">
            <summary>
            声道数目，1--单声道；2--双声道
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.Format_Chunk.SamlesPerSec">
            <summary>
            采样频率  一般有11025Hz（11kHz）、22050Hz（22kHz）和44100Hz（44kHz）三种
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.Format_Chunk.AvgBytesPerSec">
            <summary>
            每秒所需字节数
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.Format_Chunk.BlockAlign">
            <summary>
            数据块对齐单位(每个采样需要的字节数)
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.Format_Chunk.BitsPerSample">
            <summary>
            音频采样大小 
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.Format_Chunk.Temp">
            <summary>
            ???
            </summary>
        </member>
        <member name="T:Speech.Data.WaveInfo.Fact_Chunk">
            <summary>
            FACT
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.Fact_Chunk.ID">
            <summary>
            文件前四个字节 为fact
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.Fact_Chunk.Size">
            <summary>
            数据大小
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.Fact_Chunk.Temp">
            <summary>
            临时数据
            </summary>
        </member>
        <member name="T:Speech.Data.WaveInfo.Data_Chunk">
            <summary>
            数据区
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.Data_Chunk.ID">
            <summary>
            文件前四个字节 为RIFF
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.Data_Chunk.Size">
            <summary>
            大小
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.Data_Chunk.FileBeginIndex">
            <summary>
            开始播放的位置
            </summary>
        </member>
        <member name="F:Speech.Data.WaveInfo.Data_Chunk.FileOverIndex">
            <summary>
            结束播放的位置
            </summary>
        </member>
        <member name="T:Speech.Engine.Exceptions.EngineException">
            <summary>
            引擎异常
            </summary>
        </member>
        <member name="M:Speech.Engine.Exceptions.EngineException.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.Exceptions.EngineException"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.Exceptions.EngineException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.Exceptions.EngineException"/> class with
            the specified message.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.Exceptions.EngineException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            <para>默认不可重试、恢复</para>
            </summary>
            <param name="message">A message to include with the exception.</param>
            <param name="innerException">A nested exception to include.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.Exceptions.EngineException"/> class
            with the specified message and inner exception.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.Exceptions.EngineException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="isReparable">是否可以重试、恢复</param>
        </member>
        <member name="M:Speech.Engine.Exceptions.EngineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            为序列化提供的构造函数
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Speech.Engine.Exceptions.EngineException.IsReparable">
            <summary>
            是否可恢复:配置、网络
            <para >(默认是可恢复) </para>
            </summary>
        </member>
        <member name="P:Speech.Engine.Exceptions.EngineException.ErrorCode">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="P:Speech.Engine.Exceptions.ErrorItem.IsReparable">
            <summary>
            是否可恢复
            <para>默认：不可恢复</para>
            </summary>
        </member>
        <member name="T:Speech.Engine.IIR.Core.IIRApi">
            <summary>
            年龄识别
            </summary>
        </member>
        <member name="F:Speech.Engine.IIR.Core.IIRApi._IIREnginePath">
            <summary>
            引擎所在的位置
            </summary>        
        </member>
        <member name="T:Speech.Engine.IIR.Core.eIIRDataStatus">
            <summary>
            传入数据状态
            </summary>
        </member>
        <member name="P:Speech.Engine.IIR.Data.AgeData.Gender">
            <summary>
            性别
            </summary>
        </member>
        <member name="P:Speech.Engine.IIR.Data.AgeData.Age">
            <summary>
            年龄
            </summary>
        </member>
        <member name="P:Speech.Engine.IIR.Data.AgeData.GenderScore">
            <summary>
            性别得分
            </summary>
        </member>
        <member name="P:Speech.Engine.IIR.Data.AgeData.AgeScore">
            <summary>
            年龄得分
            </summary>
        </member>
        <member name="T:Speech.Engine.IIR.Data.IIRAge">
            <summary>
            年龄类型
            </summary>
        </member>
        <member name="T:Speech.Engine.IIR.Data.IIRGender">
            <summary>
            性别类型
            </summary>
        </member>
        <member name="T:Speech.Engine.IIR.Exceptions.IIRErrors">
             <summary>
            The enumeration IIR_ERROR enumerates possible EngineError codes 
             </summary>
        </member>
        <member name="F:Speech.Engine.IIR.Exceptions.IIRErrors.Engine_SUCCESS">
            <summary>
            function completed successfully
            </summary>
        </member>
        <member name="T:Speech.Engine.IIR.Exceptions.IIRException">
            <summary>
            IIR 引擎异常
            </summary>
        </member>
        <member name="M:Speech.Engine.IIR.Exceptions.IIRException.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.IIR.Exceptions.IIRException"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.IIR.Exceptions.IIRException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.IIR.Exceptions.IIRException"/> class with
            the specified message.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.IIR.Exceptions.IIRException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            <para>默认不可重试、恢复</para>
            </summary>
            <param name="message">A message to include with the exception.</param>
            <param name="innerException">A nested exception to include.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="!:VsppException"/> class
            with the specified message and inner exception.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.IIR.Exceptions.IIRException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="isReparable">是否可以重试、恢复</param>
        </member>
        <member name="M:Speech.Engine.IIR.Exceptions.IIRException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            为序列化提供的构造函数
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Speech.Engine.IIR.IIREngine">
            <summary>
            该类是引擎环境控制类，主要用于对引擎的加载初始化与逆初始化。
            初始化与逆初始化在应用中只能做一次，所以该类的使用应放在应用程序的启动与退出场景中。
            </summary>
        </member>
        <member name="F:Speech.Engine.IIR.IIREngine._hasInitialize">
            <summary>
            用于标识引擎是否已被初始化。对引擎初始化与逆初始化时，需要对该域值做同步，防止被初始化多次。
            </summary>
        </member>
        <member name="F:Speech.Engine.IIR.IIREngine._strEnginePath">
            <summary>
            当前引擎接口所安装在磁盘中的位置
            </summary>
        </member>
        <member name="F:Speech.Engine.IIR.IIREngine._synRoot">
            <summary>
            内部操作同步对象
            </summary>
        </member>
        <member name="M:Speech.Engine.IIR.IIREngine.Initialize(System.String)">
            <summary>
            对引擎进行初始化
            </summary>
        </member>
        <member name="M:Speech.Engine.IIR.IIREngine.Uninitialize">
            <summary>
            逆初始化引擎
            </summary>
        </member>
        <member name="P:Speech.Engine.IIR.IIREngine.HasInitialize">
            <summary>
            引擎是否已被初始化
            </summary>
        </member>
        <member name="T:Speech.Engine.IIR.IIRWorker">
            <summary>
            底层引擎应用系统外壳工作者
            </summary>
        </member>
        <member name="F:Speech.Engine.IIR.IIRWorker._vst">
            <summary>
            引擎实例
            </summary>
        </member>
        <member name="F:Speech.Engine.IIR.IIRWorker._iRet">
            <summary>
            引擎操作返回值
            </summary>
        </member>
        <member name="M:Speech.Engine.IIR.IIRWorker.#ctor(System.IntPtr)">
            <summary>
            默认构造函数.
            <para>创建当前工作者需要的引擎实例</para>
            </summary>
        </member>
        <member name="M:Speech.Engine.IIR.IIRWorker.IdentifyAge(Speech.Engine.Vspp.Data.VsppDataAudio)">
            <summary>
            进行年龄识别
            </summary> 
            <param name="audioData">语音数据</param> 
            <returns>年龄识别结果</returns>
        </member>
        <member name="M:Speech.Engine.IIR.IIRWorker.DoAudioWrite(System.Byte[])">
            <summary>
            进行语音写入
            </summary> 
            <param name="audioData">语音数据</param> 
            <returns>年龄识别结果</returns>
        </member>
        <member name="M:Speech.Engine.IIR.IIRWorker.DoGetResult">
            <summary>
            获取识别结果
            </summary>
            <returns>识别结果</returns>
        </member>
        <member name="M:Speech.Engine.IIR.IIRWorker.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:Speech.Engine.IIR.IIRWorker.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Speech.Engine.IIR.IIRWorker.QIIRAction(System.IntPtr,Speech.Engine.Vspp.Data.VsppDataAudio)" -->
        <member name="T:Speech.Engine.iNorm.Exceptions.INormErrors">
            <summary>
            
            </summary>
        </member>
        <member name="F:Speech.Engine.iNorm.Exceptions.INormErrors.Engine_SUCCESS">
            <summary>
            function completed successfully
            </summary>
        </member>
        <member name="T:Speech.Engine.iNorm.Exceptions.INormException">
            <summary>
            iNorm 引擎异常
            </summary>
        </member>
        <member name="M:Speech.Engine.iNorm.Exceptions.INormException.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.iNorm.Exceptions.INormException"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.iNorm.Exceptions.INormException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.iNorm.Exceptions.INormException"/> class with
            the specified message.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.iNorm.Exceptions.INormException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            <para>默认不可重试、恢复</para>
            </summary>
            <param name="message">A message to include with the exception.</param>
            <param name="innerException">A nested exception to include.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.iNorm.Exceptions.INormException"/> class
            with the specified message and inner exception.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.iNorm.Exceptions.INormException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="isReparable">是否可以重试、恢复</param>
        </member>
        <member name="M:Speech.Engine.iNorm.Exceptions.INormException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            为序列化提供的构造函数
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:BEye.Engine.Vspp.iNorm.iNormApi.OpenNewInormRes(System.String)">
            <summary>
            新建inorm资源，输入的为inorm资源存储的路径，如果inorm资源需要给多个引擎使用
            请使用unc共享路径
            </summary>
            <param name="pathname">保存inorm资源的文件路径</param>
            <returns>
            SUCCESS = 0                                 
            INORM_ERROR_FEATURE_NOT_MATCH_UTR = -3,     // feature and utr not match
            INORM_ERROR_INVALID_FEATURE = -4,           // invalid feature data
            INORM_ERROR_INVALID_PARA = -5,              // invalid para
            INORM_ERROR_RESOURCE_NOT_EXIST = -6,        // inorm resource not exit
            INORM_ERROR_CREATE_RES_FAIL = -7,           // fail to create res
            INORM_ERROR_DESCRIPTION_EMPTY = -8,         // the description file is empty
            INORM_ERROR_CREATE_DESCRIPTION_FAIL = -9,   // fail to create description file
            INORM_ERROR_CONFIGURE_NOT_EXIT = -10,       // ginorm configure file not exit
            INORM_ERROR_NOT_SUPPORT_WAV_INPUT = -11     // ginom don't support the wav input
            </returns>
            <remarks>
            int GINORMAPI OpenNewInormRes(const char* pathname);
            </remarks>
        </member>
        <member name="M:BEye.Engine.Vspp.iNorm.iNormApi.AppendOneFeature(System.Byte[],System.Byte[],System.Int32,System.Int32,BEye.Engine.Vspp.iNorm.iNormResultStates@)">
            <summary>
            添加一条特征数据，输入为特征+utr，资源状态有三种：INORM_NEED_MORE 表示有一个区段不够
            INORM_HAS_LEAST_NUM、表示所有区段达到最少要求，INORM_HAS_ENOUGH、表示所有区段达到最高要求
            </summary>
            <param name="fea_data">fea数据</param>
            <param name="utr_data">utr数据</param>
            <param name="fea_len">fea数据长度</param>
            <param name="utr_len">utr数据长度</param>
            <param name="state">标识资源状态</param>
            <returns>
            SUCCESS = 0                                 
            INORM_ERROR_FEATURE_NOT_MATCH_UTR = -3,     // feature and utr not match
            INORM_ERROR_INVALID_FEATURE = -4,           // invalid feature data
            INORM_ERROR_INVALID_PARA = -5,              // invalid para
            INORM_ERROR_RESOURCE_NOT_EXIST = -6,        // inorm resource not exit
            INORM_ERROR_CREATE_RES_FAIL = -7,           // fail to create res
            INORM_ERROR_DESCRIPTION_EMPTY = -8,         // the description file is empty
            INORM_ERROR_CREATE_DESCRIPTION_FAIL = -9,   // fail to create description file
            INORM_ERROR_CONFIGURE_NOT_EXIT = -10,       // ginorm configure file not exit
            INORM_ERROR_NOT_SUPPORT_WAV_INPUT = -11     // ginom don't support the wav input
            </returns>
            <remarks>
            int GINORMAPI AppendOneFeature(void *fea, void *utr, int fea_len, int utr_len, INORMResultStatus *stauts);
            </remarks>
        </member>
        <member name="M:BEye.Engine.Vspp.iNorm.iNormApi.AppendOneWav(System.Byte[],System.Int32,System.String,BEye.Engine.Vspp.iNorm.iNormResultStates@)">
            <summary>
            添加一条语音到新资源
            </summary>
            <param name="wav_data">输入的语音数据</param>
            <param name="wav_len">语音长度</param>
            <param name="type">输入语音类型类型</param>
            <param name="status">标识资源状态</param>
            <returns>
            SUCCESS = 0                                 
            INORM_ERROR_FEATURE_NOT_MATCH_UTR = -3,     // feature and utr not match
            INORM_ERROR_INVALID_FEATURE = -4,           // invalid feature data
            INORM_ERROR_INVALID_PARA = -5,              // invalid para
            INORM_ERROR_RESOURCE_NOT_EXIST = -6,        // inorm resource not exit
            INORM_ERROR_CREATE_RES_FAIL = -7,           // fail to create res
            INORM_ERROR_DESCRIPTION_EMPTY = -8,         // the description file is empty
            INORM_ERROR_CREATE_DESCRIPTION_FAIL = -9,   // fail to create description file
            INORM_ERROR_CONFIGURE_NOT_EXIT = -10,       // ginorm configure file not exit
            INORM_ERROR_NOT_SUPPORT_WAV_INPUT = -11     // ginom don't support the wav input
            </returns>
            <remarks>
            int GINORMAPI AppendOneWav(void* wav_data, unsigned int wav_len, const char *type, INORMResultStatus *stauts);
            </remarks>
        </member>
        <member name="M:BEye.Engine.Vspp.iNorm.iNormApi.CloseInormRes">
            <summary>
            关闭inorm新资源，该接口成功返回表示资源生成成功，同时生成相应的资源描述文件
            </summary>
            <returns>
            SUCCESS = 0                                 
            INORM_ERROR_FEATURE_NOT_MATCH_UTR = -3,     // feature and utr not match
            INORM_ERROR_INVALID_FEATURE = -4,           // invalid feature data
            INORM_ERROR_INVALID_PARA = -5,              // invalid para
            INORM_ERROR_RESOURCE_NOT_EXIST = -6,        // inorm resource not exit
            INORM_ERROR_CREATE_RES_FAIL = -7,           // fail to create res
            INORM_ERROR_DESCRIPTION_EMPTY = -8,         // the description file is empty
            INORM_ERROR_CREATE_DESCRIPTION_FAIL = -9,   // fail to create description file
            INORM_ERROR_CONFIGURE_NOT_EXIT = -10,       // ginorm configure file not exit
            INORM_ERROR_NOT_SUPPORT_WAV_INPUT = -11     // ginom don't support the wav input
            </returns>
            <remarks>
            int GINORMAPI CloseInormRes(void);
            </remarks>
        </member>
        <member name="T:BEye.Engine.Vspp.iNorm.iNormResultStates">
            <summary>
            参数直接结果定义
            </summary>
        </member>
        <member name="T:BEye.Engine.Vspp.iNorm.iNormWorker">
            <summary>
            iNorm资源注册工作单元
            </summary>
        </member>
        <member name="M:BEye.Engine.Vspp.iNorm.iNormWorker.#ctor(System.String)">
            <summary>
            工作模式(显示)
            </summary>
            <param name="pathname"></param>
        </member>
        <member name="M:BEye.Engine.Vspp.iNorm.iNormWorker.AppendOneFeature(Speech.Engine.Vspp.Data.VsppDataFea,Speech.Engine.Vspp.Data.VsppDataUtr)">
            <summary>
            追加特征结果到inorm资源库
            </summary>
            <param name="feaData"></param>
            <param name="utrData"></param>
            <returns></returns>
        </member>
        <member name="M:BEye.Engine.Vspp.iNorm.iNormWorker.CloseInormRes">
            <summary>
            关闭inorm新资源，该接口成功返回表示资源生成成功，同时生成相应的资源描述文件
            </summary> 
        </member>
        <member name="T:BEye.Engine.Vspp.iNorm.iNormWorkerNode">
            <summary>
            iNorm资源注册工作单元
            </summary>
        </member>
        <member name="M:BEye.Engine.Vspp.iNorm.iNormWorkerNode.FillResData(System.Collections.Generic.List{Speech.Engine.Vspp.Data.VsppData})">
            <summary>
            追加文件
            <para>True: 需要持续工作,没有追加足够的资源</para>
            <para>False:不需要再工作,资源追加已满足</para> 
            </summary>
            <param name="objVsppDataList">VSPPData对象集合</param>
            <returns>
            <para>True: 需要持续工作,没有追加足够的资源</para>
            <para>False: 不需要再工作,资源追加已满足</para> 
            </returns>
        </member>
        <member name="T:Speech.Engine.Isve.Core.IsveApi">
            <summary>
            声纹识别引擎（iFLY Speeker Verifier）
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.Uninitialize">
            <summary>
            逆初始化并关闭声纹识别引擎，释放全局资源。
            <para>注：</para>
            <para>
            这个函数是声纹识别接口中最后一个调用的函数，必须保证一个进程仅调用一次，
            在调用这个函数之前，必须保证所有的识别实例都已经释放
            </para>
            </summary>
            <returns>如果函数调用成功返回ISV_SUCCESS，否则返回错误代码</returns>
            <remarks>
            int ISVAPI ISVEUninitialize(void)
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.CreateInst(System.IntPtr@,System.String)">
            <summary>
            创建一个声纹识别实例
            <para>注：</para>
            <para> 这个函数用于声纹识别资源的管理，
            一般情况下，可以在应用初始化的时候为每个通道创建一个声纹识别实例，或者每次呼叫时创建一个实例。
            </para>
            </summary>
            <param name="isv_inst">
            传入声纹识别实例句柄的地址,返回新创建的实例句柄
            </param>
            <param name="paramsstr">
            创建句柄时可以携带的参数值信息，格式为“param1=value1,param2=value2”，
            在句柄创建后会使用这里指定的参数初始化句柄。
            </param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_NOT_INIT	没有初始化<para></para>
            ISV_ERROR_NO_LICENSE 没有加密狗授权<para></para>
            ISV_ERROR_INVALID_PARA 无效参数<para></para>  
            ISV_ERROR_INVALID_PARA_VALUE 无效参数值<para></para>  
            ISV_ERROR_NULL_HANDLE 参数isv_inst指针无效<para></para>  
            </returns>
            <seealso cref="M:Speech.Engine.Isve.Core.IsveApi.Initialize(System.String,System.IntPtr)"/>
            <seealso cref="!:Destroy"/>
            <remarks>
            int ISVAPI ISVECreateInst(ISV_INST*  isv_inst, const wchar_t* params);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.DestroyInst(System.IntPtr)">
            <summary>
            销毁一个声纹识别实例，该实例由CreateInst生成
            </summary>
            <param name="svt">由CreateInst创建的实例句柄；</param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_NULL_HANDLE	参数isv_inst句柄为空<para></para>
            ISV_ERROR_INVALID_HANDLE	参数isv_inst句柄无效<para></para>
            </returns>
            <remarks>
            int ISVAPI ISVEDestroyInst(ISV_INST isv_inst);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.ComputeFeature(Speech.Engine.Isve.Core.ISVSpeech@,System.Int32,System.IntPtr@)">
            <summary>
            计算一段语音的特征(feature)。特征用于后面的个人语音模型计算和自适应，以及鉴别和确认。
            <para>注：</para>
            <para> 这个函数可以计算传入语音的特征(feature),这些特征可以用来作为训练和自适应用户声纹模型的输入，一个用户模型对应多个feature。
            同时，在声纹确认和鉴别过程中，也需要将待确认的语音计算特征，用来与先前训练的模型进行计算；
            计算特征完成后，特征的好坏可以通过GetFeatureInfo来查询，只有满足一定要求的特征才可以用来进行模型的训练、自适应、确认和鉴别；
            计算的特征通过一个句柄与内存空间对应，可以通过ISVESerializeFeature来序列化一个特征，以便保存在存储设备中。
            同样可以通过DeserializeFeature来加载一个存储设备中的模型数据。
            </para>
            </summary>
            <param name="speech">
            输入的音频数据信息，一个结构体，用于描述音频数据以及格式信息
            </param>
            <param name="endPointed">
            是否进行了端点检测，去除了静音段。此参数暂时无效      
            </param>
            <param name="featureHandle">
            传出的计算得到的特征的一个全局句柄      
            </param>       
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_NOT_INIT	没有初始化<para></para>
            ISV_ERROR_NO_LICENSE 没有加密狗授权<para></para>
            ISV_ERROR_INVALID_PARA 无效参数<para></para>  
            ISV_ERROR_INVALID_PARA_VALUE 无效参数值<para></para>  
            ISV_ERROR_NULL_HANDLE 参数isv_inst指针无效<para></para>  
            </returns>
            <seealso cref="M:Speech.Engine.Isve.Core.IsveApi.Initialize(System.String,System.IntPtr)"/>
            <seealso cref="!:Destroy"/>
            <remarks>
             int ISVAPI ISVEComputeFeature (const ISV_Speech * speech, int end_pointed, ISV_FeatureHandle * feature_handle);
            </remarks>   
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.GetFeatureInfo(System.IntPtr,Speech.Engine.Isve.Core.ISV_FeatureInfo@)">
            <summary>
            获得一个特征的相关信息，与连接实例无关
            <para>注：</para>
            <para>
            该函数可以获得一个特征的相关信息，这些返回信息可以用来决定数据质量是否符合相关应用的需要
            </para>
            </summary>
            <param name="featureHandle">标志特征的句柄，进程级全局唯一，
            由ComputeFeature或DeserializeFeature生成</param>
            <param name="featureInfo">输出的特征信息，为一个结构体</param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_INVALID_HANDLE feature_handle 无效<para></para>
            ISV_ERROR_NULL_HANDLE feature_handle 为空<para></para>  
            </returns>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.AppendFeautreUtr(System.IntPtr,System.Byte*,System.Int32)">
            <summary>
            
            </summary>
            <param name="featureHandle"></param>
            <param name="buffer"></param>
            <param name="lenBytes"></param>
            <returns></returns>
            <remarks>
            int ISVAPI ISVEAppendFeautreUtr(ISV_FeatureHandle feature_handle, const void* utr_data, unsigned int len_bytes);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.SerializeFeature(System.IntPtr,System.IntPtr@,System.Int32@)">
            <summary>
            序列化一个特征，即从内存中将特征传出，用于存储特征数据
            <para>注：</para>
            <para>
            序列化特征是为了保存特征到存储设备上的方法，与DeserializeFeature的过程相反
            </para>
            </summary>
            <param name="featureHandle">标志特征的句柄，进程级全局唯一，
            由ComputeFeature或DeserializeFeature生成</param>
            <param name="buffer">存储特征数据的缓冲区，由引擎内部管理</param>
            <param name="lenBytes">存储特征数据缓冲区长度，以字节为单位</param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_INVALID_HANDLE feature_handle 无效<para></para>
            ISV_ERROR_NULL_HANDLE feature_handle 为空<para></para>  
            </returns>
            <remarks>
            int ISVAPI ISVESerializeFeature(ISV_FeatureHandle feature_handle, const void ** buffer, unsigned int * len_bytes)
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.DeserializeFeature(System.Byte*,System.Int32,System.IntPtr@)">
            <summary>
            反序列化一个特征，即将制定的特征读入到系统
            <para>注：</para>
            <para>
            与SerializeFeature相反过程
            </para>
            </summary>
            <param name="buffer">传入的特征缓冲区指针</param>
            <param name="lenBytes">特征缓冲区的长度，以字节为单位</param>
            <param name="featureHandle">反序列化特征的句柄</param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_VE_INVALID_FEATURE 特征数据无效<para></para>        
            </returns>
            <remarks>
            int ISVAPI ISVEDeserializeFeature(void * buffer, unsigned int len_bytes, ISV_FeatureHandle * feature_handle)
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.DestroyFeature(System.IntPtr)">
            <summary>
            销毁一个特征句柄，释放引擎内部分配的内存
            <para>注：</para>
            <para>
            销毁标志特征的句柄，同时释放为特征分配的内存。特征能够被进程中的多个线程共享，
            在特征被其他线程使用时，特征不能被销毁。
            如果一个特征被销毁，引擎不负责告诉其他线程该特征已被销毁
            </para>
            </summary>
            <param name="featureHandle">
            需要销毁的特征句柄，进程唯一，由ComputeFeature或DeserializeFeature生成
            </param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_INVALID_HANDLE	feature_handle 无效<para></para>       
            ISV_ERROR_NULL_HANDLE	feature_handle为空<para></para>
            </returns>
            <remarks>
            int ISVAPI ISVEDestroyFeature(ISV_FeatureHandle feature_handle)
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.ComputeModel(System.IntPtr[],System.UInt32,System.Int32,System.IntPtr@)">
            <summary>
            计算个人声纹模型，需要提供提取的足够都的特征信息
            <para>注：</para>
            <para>
            通过同一个人的语音计算出特征，将有效的特征传给本函数，即可得到该说话人的声纹模型。
            声纹模型反映说话人的特点，用来进行鉴别和确认。
            计算的模型按照文本相关性可分为两种，即文本相关和文本无关:
            文本相关即需要注册与识别时说同样的一段话，即声纹密码。优点是需要注册语音少，识别率高。
            当前系统不支持文本无关即注册与识别时说话不需要一致，
            所需注册语音多，但是识别时无文本限制。当前系统支持
            </para>
            </summary>
            <param name="featureHandle">
            个人特征的集合，是一个数组
            </param>
            <param name="featureNum">特征的个数</param>
            <param name="textType">是否为声纹密码，当前不支持声纹密码。可能取值</param>
            <param name="modelInfo">返回的模型句柄，用于标志进程唯一的模型</param>        
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_NO_MORE_DATA	特征数据不够<para></para>        
            </returns>
            <remarks>
            int ISVAPI ISVEComputeModel(ISV_FeatureHandle * feature_handle, unsigned int feature_num, int  text_type,  ISV_ModelHandle * modle_handle)
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.ModelMerge(System.IntPtr[],System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            将多个模型合并成为一个模型       
            </summary>
            <param name="modelHandleIn">
            模型句柄的集合，是一个数组
            </param>
            <param name="modelNum">特征的个数</param>
            <param name="mergeType">合并的类型</param>  
            <param name="modelHandleOut">返回的模型句柄，用于标志进程唯一的模型</param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_INVALID_HANDLE	model_handle 无效<para></para>        
            ISV_ERROR_NULL_HANDLE	model_handle为空<para></para>    
            </returns>
            <remarks>
            int  ISVAPI ISVEModelMerge(ISV_ModelHandle * model_handle_in, unsigned int model_num, ISV_MergeType  merge_type,  ISV_ModelHandle * modle_handle_out)
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.GetModelInfo(System.IntPtr,Speech.Engine.Isve.Core.ISV_ModelInfo@)">
            <summary>
            获取个人声纹模型的相关信息，通过这些信息可以反映出模型数据的质量     
            <para>注：</para>
            <para>该函数可获得个人声纹模型的相关信息，相关信息可以用来检查一个模型的质量。
            如果模型质量不符合应用的需要，可以舍弃通过ISVECompute 得到的模型，重新训练。质量标准可以由外部设定。
            </para>
            </summary>
            <param name="modelHandle">
            标志声纹模型的句柄，进程级全局唯一，由ComputeModel或DeserializeModel生成
            </param>
            <param name="modelInfo">模型的相关信息，为结构体</param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_INVALID_HANDLE	model_handle 无效 <para></para>
            ISV_ERROR_NULL_HANDLE	model_handle为空 <para></para>    
            </returns>
            <remarks>
            int ISVAPI ISVEGetModelInfo(ISV_ModelHandle model_handle, ISV_ModelInfo * model_info)
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.SerializeModel(System.IntPtr,System.IntPtr@,System.Int32@)">
            <summary>
            序列化一个用户声纹模型，将内存中的模型存储起来    
            <para>注：</para>
            <para>序列化特征是为了保存模型到存储设备上的方法，与DeserializeModel的过程相反
            </para>
            </summary>
            <param name="modelHandle">
            将要序列化存储的声纹模型句柄，进程全局唯一
            </param>
            <param name="buffer">存储模型数据的缓冲区，由引擎内部管理</param>
            <param name="lenBytes">返回缓冲区长度，以字节为单位</param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_INVALID_HANDLE	model_handle 无效 <para></para>
            ISV_ERROR_NULL_HANDLE	model_handle为空 <para></para>    
            </returns>
            <remarks>
            int  ISVAPI ISVESerializeModel(ISV_ModelHandle 	model_handle, const void ** buffer, unsigned int * len_bytes);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.DeserializeModel(System.Byte*,System.Int32,System.IntPtr@)">
            <summary>
            反序列化一个用户声纹模型，即加载模型到引擎。返回一个模型句柄，用来自适应、鉴别或确认  
            <para>注：</para>
            <para>与SerializeModel过程相反，加载个人声纹模型到引擎中，提供给自适应和识别使用
            </para>
            </summary>
            <param name="buffer">
            外部存储模型缓冲区
            </param>
            <param name="lenBytes">缓冲区长度，以字节计算</param>
            <param name="modelHandle">返回的模型句柄，进程全局唯一</param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_VE_INVALID_MODEL	无效的模型 <para></para> 
            </returns>
            <remarks>
            int  ISVAPI ISVEDeserializeModel(void * buffer, unsigned int len_bytes, ISV_ModelHandle * model_handle)
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.DestroyModel(System.IntPtr)">
            <summary>
            销毁模型句柄，释放模型所占用的内存
            <para>注：</para>
            <para>销毁标志模型的句柄，同时释放为其分配的内存。
            模型能够被进程中的多个线程共享，在模型被其他线程使用时，模型句柄不能被销毁。
            如果一个句柄被销毁，引擎不负责告诉其他线程该句柄已被销毁
            </para>
            </summary>
            <param name="modelHandle">声纹模型句柄，进程全局唯一</param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_INVALID_HANDLE	model_handle 无效 <para></para> 
            ISV_ERROR_NULL_HANDLE	model_handle为空 <para></para> 
            </returns>
            <seealso cref="M:Speech.Engine.Isve.Core.IsveApi.ComputeModel(System.IntPtr[],System.UInt32,System.Int32,System.IntPtr@)"/>
            <seealso cref="M:Speech.Engine.Isve.Core.IsveApi.DeserializeModel(System.Byte*,System.Int32,System.IntPtr@)"/>
            <remarks>
            int ISVAPI ISVEDestroyModel(ISV_ModelHandle model_handle)
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.VerifyText(System.IntPtr,System.String,Speech.Engine.Isve.Core.ISVSpeech,System.Single@,System.Int32@)">
            <summary>
            计算语音与文本的匹配度，算出得分，确认语音是否为所标明的文本
            <para>注：</para>
            <para>在声纹确认或鉴别之前，如果外部需要确认所说的文本是预先给定的，
            调用此接口，可以得到语音与预先给定文本的相关度。相关度用一个得分表示，
            如果高于预先设置的阀值，则进行下面的声纹确认或识别；
            如果低于预先设置的阀值，则直接返回识别错误
            </para>
            </summary>
            <param name="isvInst">由ISVECreateInst创建的实例句柄</param>
            <param name="speechText">标明语音对应的文本，语言由系统参数设置</param>
            <param name="speech">输入的语音数据信息，为结构体，具体参见ISVEComputeFeature</param>
            <param name="matchScore">语音与文本的匹配度，是一个得分，范围：0-100(100表示匹配最好)</param>
            <param name="decision">决策值：0表示不匹配，1表示匹配，其门槛由参数设定</param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_INVALID_MEDIA_TYPE	传入的音频格式错误或者不能支持 <para></para> 
            ISV_ERROR_VE_TEXT_LENGTH	非法的文本长度 <para></para> 
            </returns>
            <seealso cref="T:Speech.Engine.Isve.Core.IsveApi.ISVEVerify"/>
            <seealso cref="T:Speech.Engine.Isve.Core.IsveApi.ISVEIdentify"/>
            <remarks>
            int ISVAPI ISVEVerifyText (ISV_INST isv_inst, const wchar_t * speech_text, ISV_Speech * speech, float * match_score, int decision)
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.VerifyUtr(System.IntPtr,System.IntPtr,System.IntPtr@,System.Int32@)">
            <summary>
            获取UTR数据
            </summary>
            <param name="isvInst"></param>
            <param name="featureHandle"></param>
            <param name="buffer"></param>
            <param name="lenBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.Verify(System.IntPtr,System.IntPtr,System.IntPtr,Speech.Engine.Isve.Core.ISV_Result@)">
            <summary>
            声纹确认接口，通过提取待确认语音的特征与个人声纹模型计算得到分数，以确认是否是声明的说话人
            <para>注：</para>
            <para>确认结果提供几种得分，这些得分可以得到一个最后确认值。
            不同的应用可以采取不同的得分，它们都根据预先设定的targetFA阀值来得到结果。
            最后的结果不仅考虑分数，还考虑到了输入语音的质量，以及注册和确认语音特点的匹配程度
            </para>
            </summary>
            <param name="isvInst">由ISVECreateInst创建的实例句柄</param>
            <param name="featureHandle">待确认语音提取的特征句柄，用于得分计算</param>
            <param name="modelHandle">所声明说话人的声纹模型</param>
            <param name="result">确认结果，为一个结构体</param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_INVALID_MEDIA_TYPE	传入的音频格式错误或者不能支持 <para></para> 
            </returns>
            <seealso cref="M:Speech.Engine.Isve.Core.IsveApi.Identify(System.IntPtr,System.IntPtr,Speech.Engine.Isve.Core.ISV_Result@)"/>
            <remarks>
            int ISVAPI ISVEVerify (ISV_INST isv_inst, ISV_FeatureHandle feature_handle, ISV_ModelHandle model_handle,  ISV_Result * result)
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.IdentifyBegin(System.IntPtr,System.IntPtr)">
            <summary>
            开始鉴别，输入需要鉴别的特征句柄，与结束鉴别配对IdentifyEnd
            <para>注：</para>
            <para>一个完整的鉴别包括IdentifyBegin、Identify、IdentifyEnd三步。
            其中本函数主要是计算待鉴别语音的一些数据，作为中间数据提供给Identify使用，以节省数据计算。
            调用本函数后，鉴别结束必须调用IdentifyEnd，以清除中间数据
            </para>
            </summary>
            <param name="isvInst">由CreateInst创建的实例句柄</param>
            <param name="featureHandle">标志的鉴别语音特征的句柄</param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_BUSY	鉴别正在进行中 <para></para> 
            ISV_ERROR_INVALID_HANDLE	feature_handle 无效 <para></para> 
            ISV_ERROR_NULL_HANDLE	feature_handle为空 <para></para> 
            </returns>
            <seealso cref="M:Speech.Engine.Isve.Core.IsveApi.Identify(System.IntPtr,System.IntPtr,Speech.Engine.Isve.Core.ISV_Result@)"/>
            <seealso cref="M:Speech.Engine.Isve.Core.IsveApi.IdentifyEnd(System.IntPtr)"/>
            <remarks>
            int ISVAPI ISVEIdentifyBegin(ISV_INST isv_inst, ISV_FeatureHandle feature_handle)
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.Identify(System.IntPtr,System.IntPtr,Speech.Engine.Isve.Core.ISV_Result@)">
            <summary>
            完成一个模型的声纹鉴别
            <para>注：</para>
            <para>本函数会利用到ISVEIdentifyBegin中准备的数据来进行计算，使用之前必须要成功调用IdentifyBegin。
            函数一次只完成一个声纹模型的鉴别，所以函数调用的次数与需要鉴别的模型个数是一致的
            </para>
            </summary>
            <param name="isvInst">由CreateInst创建的实例句柄</param>
            <param name="modelHandle">用来鉴别的用户声纹模型句柄，进程全局唯一</param>
            <param name="result">鉴别的结果</param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_INVALID_HANDLE	模型句柄无效 <para></para> 
            ISV_ERROR_NULL_HANDEL	模型句柄为空 <para></para> 
            </returns>
            <seealso cref="M:Speech.Engine.Isve.Core.IsveApi.IdentifyBegin(System.IntPtr,System.IntPtr)"/>
            <seealso cref="!:IdentiifyEnd"/>
            <remarks>
            int ISVAPI ISVEIdentify(ISV_INST isv_inst, ISV_ModelHandle model_handle, ISV_Result * result)
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.IdentifyEnd(System.IntPtr)">
            <summary>
            结束一次由Identify开始的鉴别过程
            <para>注：</para>
            <para>IdentifyBegin配对调用，清空由Identify产生的中间数据
            </para>
            </summary>
            <param name="isvInst">由CreateInst创建的实例句柄</param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_INVALID_HANDLE	模型句柄无效 <para></para> 
            ISV_ERROR_NULL_HANDEL	模型句柄为空 <para></para> 
            ISV_ERROR_NOT_BEGIN	没有执行IdentifyBegin <para></para>
            </returns>
            <seealso cref="T:Speech.Engine.Isve.Core.IsveApi.ISVEIdentifyBegin"/>
            <seealso cref="T:Speech.Engine.Isve.Core.IsveApi.ISVEIdentify"/>
            <remarks>
            int ISVAPI ISVEIdentifyEnd(ISV_INST isv_inst)
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.ModelAdapt(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            对现有模型进行自适应，以提升识别的准确度
            <para>注：</para>
            <para>通过持续的自适应可以改进用户模型的质量，以提高识别的准确度。
            用来自适应模型的语音，必须是对应模型用户的语音，并且质量要好，否则会降低用户模型质量
            </para>
            </summary>
            <param name="isvInst">由CreateInst创建的实例句柄</param>
            <param name="modelHandle">需要自适应的模型句柄，进程全局唯一</param>
            <param name="featureHandle">用来自适应特征的句柄，进程全局唯一</param>        
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_INVALID_HANDLE  feature_handle 无效 <para></para> 
            ISV_ERROR_NULL_HANDLE	feature_handle为空 <para></para> 
            ISV_ERROR_ADAPT_LOW_SCORE	自适应后的模型质量下降 <para></para>
            </returns>
            <seealso cref="T:Speech.Engine.Isve.Core.IsveApi.ISVEComputeModel"/>
            <remarks>
            int ISVAPI ISVEModelAdapt(ISV_INST isv_inst, ISV_ModelHandle model_handle, ISV_FeatureHandle feature_handle)
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.GetParam(System.IntPtr,System.String,System.String@,System.Int32@)">
            <summary>
            获得当前声纹识别实例的参数值
            <para>注：</para>
            <para>参数是以字符串的形式传出，需要外部转成相应的类型
            </para>
            </summary>
            <param name="isvInst">由CreateInst创建的实例句柄</param>
            <param name="param">参数名称 声纹识别的阈值，范围：0 – 100</param>
            <param name="value">参数取值</param>
            <param name="len">传出参数串的长度</param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_INVALID_PARA	无效参数 <para></para> 
            ISV_ERROR_NULL_HANDLE	参数isv_inst指针无效 <para></para> 
            </returns>
            <seealso cref="T:Speech.Engine.Isve.Core.IsveApi.ISVESetParam"/>
            <remarks>
            int ISVAPI ISVEGetParam(ISV_INST isv_inst, const wchar_t * param, wchar_t * value, unsigned int * len)
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveApi.SetParam(System.IntPtr,System.String,System.String)">
            <summary>
            设置当前声纹识别实例的参数
            <para>注：</para>
            <para>注意这个函数调用时value指向的缓冲区由用户自己分配和释放。
            目前支持的参数列表请参考GetParam的说明
            </para>
            </summary>
            <param name="isvInst">由CreateInst创建的实例句柄</param>
            <param name="param">参数名称</param>
            <param name="value">参数取值</param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_INVALID_PARA	无效参数 <para></para> 
            ISV_ERROR_NULL_HANDLE	参数isv_inst指针无效 <para></para> 
            ISV_ERROR_INVALID_PARA_VALUE	无效的参数值 <para></para> 
            </returns>
            <seealso cref="T:Speech.Engine.Isve.Core.IsveApi.ISVEGetParam"/>
            <remarks>
            int ISVAPI ISVESetParam(ISV_INST isv_inst, const wchar_t * param, const wchar_t * value)
            </remarks>
        </member>
        <member name="T:Speech.Engine.Isve.Core.ISVEnumStatus">
            <summary>
            Enum user or others status 
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Core.ISVAudioStatus">
            <summary>
            Audio write data status 
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Core.ISVResultStatus">
            <summary>
            Verifier result status 
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Core.ISV_TextType">
            <summary>
            Compute model type
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Core.ISV_SpeechStatus">
            <summary>
            Speech data status 
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Core.AudioTypeConst">
            <summary>
            音频格式
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Core.AudioTypeConst.A8k_U_law">
            <summary>
            格式为 8k U-law
            </summary> 
        </member>
        <member name="T:Speech.Engine.Isve.Core.DEFINECONST">
            <summary>
            系统使用到的一些预编译常量
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Core.ISVSpeech">
            <summary>
            输入的音频数据信息
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Core.ISVSpeech.type">
            <summary>
            输入的音频数据格式
            取自AudioTypeConst类常量
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Core.ISVSpeech.len_bytes">
            <summary>
            音频数据的长度，字节为单位
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Core.ISVSpeech.data">
            <summary>
            音频数据缓冲区
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Core.ISVSpeech.status">
            <summary>
            未知
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Core.ISV_FeatureInfo">
            <summary>
            语音特征信息
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Core.ISV_FeatureInfo.gender">
            <summary>
            特征语音的说话人性别，0表示unknow，1表示男，2表示妇
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Core.ISV_FeatureInfo.handset">
            <summary>
            特征语音的信道，暂时无效
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Core.ISV_FeatureInfo.duration">
            <summary>
            特征的时长
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Core.ISV_FeatureInfo.level">
            <summary>
            暂时无效
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Core.ISV_FeatureInfo.snr">
            <summary>
            暂时无效
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Core.ISV_FeatureInfo.clipped">
            <summary>
            暂时无效
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Core.ISV_FeatureInfo.truncated">
            <summary>
            是否有截幅，0 表示无 、1表示有
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Core.ISV_FeatureInfo.date_created">
            <summary>
            创建的时间
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Core.ISV_Result">
            <summary>
            Statistics that are pertinent to speaker verifier output
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Core.ISV_ModelInfo">
            <summary>
            Statistics that are pertinent to feature data
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Data.TvNormData">
            <summary>
            TvNormModel模型中规整数据值部分。
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Data.TvNormData._tvNormDataItemList">
            <summary>
            Tv规整参数项列表 
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvNormData.#ctor(System.Byte[])">
            <summary>
            通过 TvNormDataByte 构造 TvNormData 对象
            </summary>
            <param name="normDataByte"></param>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvNormData.ToByteArray">
            <summary>
            返回规整数值的字节数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvNormData.CalculateNormResult(System.Double,System.Int32)">
            <summary>
            传入一个有效时长，在当前对象中的Norm数据项中计算规整后的得分。
            </summary>
            <param name="tvScroe">TvModel比对得分</param>
            <param name="fitTimeLength">比对的TvModel原始注册语音有效时长，单位：秒</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvNormData.AddNormDataItem(Speech.Engine.Isve.Data.TvNormDataItem)">
            <summary>
            向当前的规整数据值对的组中增加一个规整数据值对
            </summary>
            <param name="tvNormDataItem"></param>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvNormData.RemoveNormDataItem(Speech.Engine.Isve.Data.TvNormDataItem)">
            <summary>
            从当前的规整数据值对的组中移除一个规整数据值对
            </summary>
            <param name="tvNormDataItem"></param>
        </member>
        <member name="T:Speech.Engine.Isve.Data.TvNormDataItem">
            <summary>
            TV比对得分规整参数项
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Data.TvNormDataItem.DATA_SIZE">
            <summary>
            参数项Byte长度
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvNormDataItem.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            通过  规整元素 构造规整参数项 
            </summary>
            <param name="timeRegion"></param>
            <param name="avgValue"></param>
            <param name="rmseValue"></param>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvNormDataItem.#ctor(System.Byte[])">
            <summary>
            通过 ByteArray 构造规整参数项
            </summary>
            <param name="bs"></param>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvNormDataItem.ToByteArray">
            <summary>
            将规整参数项转化成ByteArray
            </summary>
            <returns></returns>
        </member>
        <member name="P:Speech.Engine.Isve.Data.TvNormDataItem.TimeRegion">
            <summary>
            时长区间，存放时长区间的最小值
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.TvNormDataItem.AvgValue">
            <summary>
            均值
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.TvNormDataItem.RmseValue">
            <summary>
            均方差
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Data.TvNormModel">
            <summary>
            带有规整参数的TvModel
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Data.IsveDataBase">
            <summary>
            VE引擎中所有实体对象的基类
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Data.IsveDataBase.CloneTo(Speech.Engine.Isve.Data.IsveDataBase)">
            <summary>
            克隆一份本对象的属性至指定目标
            注意，数据对象的克隆是浅复制，关联的是同一个DataBuffer对象。
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.IsveDataBase.DataUUID">
            <summary>
            用于表示某个数据对应于文件系统或数据库中的唯一编号。便于在处理过程中传递。
            该数据是由业务系统生成，引擎内部永远不会主动生成该信息
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.IsveDataBase.DataSourcePath">
            <summary>
            用于表示数据的来源路径。便于在处理过程中传递。
            如文件位置、数据库中的数据类型等。
            该数据是由业务系统生成，引擎内部永远不会主动生成该信息
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.IsveDataBase.CreateDate">
            <summary>
            数据的生成时间
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.IsveDataBase.DataBuffer">
            <summary>
            【传入、传出】文件数据字节
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.IsveDataBase.TimeLength">
            <summary>
            有效时长 单位：秒
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.IsveDataBase.Gender">
            <summary>
            说话人性别，0表示妇 1表示男 2表示unknow(与VSPP引擎保持一种)
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvNormModel.#ctor(Speech.Engine.Isve.Data.TvModel,Speech.Engine.Isve.Data.TvNormData)">
            <summary>
            根据TvModel 和 TvNormData 构造 TvNormModel
            </summary>
            <param name="tvModel"></param>
            <param name="tvNormData"></param>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvNormModel.GetTvModel">
            <summary>
            获取去除Norm数据之后的纯TV模型对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvNormModel.GetTvNormData">
            <summary>
            获取TvNormModel模型中规整参数部分。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvNormModel.CheckTvNormData">
            <summary>
            检测TvNormModel模型中规整参数，并返回
            <para>如果不存在，将抛IsveException</para>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Speech.Engine.Isve.Data.TvNormResource">
            <summary>
            TV模型Norm运算的资源，包含6000个不同时长的TV模型数据。
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Data.TvNormResource._TvNormResourceDict">
            <summary>
            TV Norm 区间段 运算资源 列表
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Data.TvNormResource.PerlPath">
            <summary>
            调用Perl批处理
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Data.TvNormResource.OutputPath">
            <summary>
            调用Perl输出文本
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Data.TvNormResource.InputPath">
            <summary>
            调用Perl输入文本
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvNormResource.ReadFromFile(System.String)">
            <summary>
             从数据文件中反序列化，返回一个TV模型Norm运算的资源
            </summary>
            <param name="strFileName"></param>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvNormResource.SaveToFile(System.String)">
            <summary>
            将TV模型Norm运算的资源 保存到文件
            </summary>
            <param name="strFileName"></param>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvNormResource.AddTvNormResource(System.Int32,System.Collections.Generic.List{Speech.Engine.Isve.Data.TvModel})">
            <summary>
            添加 TV Norm 区间段 运算资源 
            </summary>
            <param name="timeRegion">时长区间，时长区间的最小值</param>
            <param name="tvModelList">运算资源</param>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvNormResource.Norm(Speech.Engine.Isve.Data.TvModel)">
            <summary>
            对一个纯TV模型进行Norm规整，返回规整后的TvNormModel对象。
            </summary>
            <param name="tvModel"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvNormResource.NormByPerl(Speech.Engine.Isve.Data.TvModel,System.Collections.Generic.List{Speech.Engine.Isve.Data.TvModel})">
            <summary>
            对一个纯TV模型进行Norm规整，返回规整后的TvNormModel对象。调用Perl脚本实现
            </summary>
            <param name="tvModel"></param>
            <param name="compareList"></param>
            <returns></returns>
        </member>
        <member name="T:Speech.Engine.Isve.IsveEngine">
             <summary>
             该类是引擎环境控制类，主要用于对引擎的加载初始化与逆初始化。
            初始化与逆初始化在应用中只能做一次，所以该类的使用应放在应用程序的启动与退出场景中。
             </summary>
        </member>
        <member name="F:Speech.Engine.Isve.IsveEngine._hasInitialize">
            <summary>
            用于标识引擎是否已被初始化。对引擎初始化与逆初始化时，需要对该域值做同步，防止被初始化多次。
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.IsveEngine._strEnginePath">
            <summary>
            当前引擎接口所安装在磁盘中的位置
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.IsveEngine._synRoot">
            <summary>
            内部操作同步对象
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.IsveEngine._apiProxy">
            <summary>
            API接口调用对象
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.IsveEngine.Initialize(System.String)">
            <summary>
            对引擎进行初始化
            </summary>
            <param name="path">
            The isv_ve.dll path.
            <para>这里的path后期将作为 引擎初始化配置文件 传入</para>
            </param> 
            <remarks>
            TODO: 
            注： isv_ve.dll 的路径 和 TvNormResource Path  、 tvNormEnabled   引擎初始化配置文件 中配置 
            by lyhu
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.IsveEngine.Uninitialize">
            <summary>
            逆初始化引擎
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.IsveEngine.ApiProxy">
            <summary>
            API接口调用对象
            所有与引擎调用的操作均要通过此对象
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.IsveEngine.HasInitialize">
            <summary>
            引擎是否已被初始化
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.IsveEngine.TvNormResource">
            <summary>
            TvNormResource 运算资源
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Core.IsveWorkerBase">
            <summary>
            该类是所有通过引擎计算类的基类。
            通过构造函数实现对引擎实例的创建，
            通过实现IDisposable接口实现引擎实例的销毁。
            包含了所有计算类中公用的方法和字段。
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Core.IsveWorkerBase._instanceHandle">
            <summary>
            引擎实例句柄
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveWorkerBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveWorkerBase.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveWorkerBase.CreateInstance">
            <summary>
            创建声纹识别实例
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Core.IsveWorkerBase.Dispose">
            <summary>
            销毁声纹识别实例
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Data.AudioData">
            <summary>
            表示原始的音频文件信息
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.AudioData.AudioFormat">
            <summary>
            语音文件音频数据格式        
            <para>缺省: audio/x-alaw-basic</para>
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Data.CompareResult">
            <summary>
            比对结果类。
            比对分值存在较多内容，包括原始分值与规整分值、TV分值与EC分值。通过该类对结果进行统一处理，内部包含了加权等运算。
            比对结果中除了重要的比对所得分值包，还应记录该次比对的源与目标对象。
            类中通过泛型可以将多种数据指定为源对象和目标对象，如数据库来源UUID等。
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Data.CompareResult.#ctor(System.String,System.String,System.Double)">
            <summary>
            构造一个TV比对结果对象，对象只有TV分值
            综合得分等于TV分值
            </summary>
            <param name="sourceId">比对源对象ID</param>
            <param name="targetId">比对目标对象ID</param>
            <param name="tvScroe">TV比对得分</param>
        </member>
        <member name="M:Speech.Engine.Isve.Data.CompareResult.#ctor(System.String,System.String,System.Double,System.Double)">
            <summary>
            构造一个TV比对结果对象，对象只有TV分值
            综合得分等于TV分值
            </summary>
            <param name="sourceId">比对源对象ID</param>
            <param name="targetId">比对目标对象ID</param>  
            <param name="tvScroe">TV比对原始得分</param>         
            <param name="tvNormScroe">TV比对规整得分</param>  
        </member>
        <member name="M:Speech.Engine.Isve.Data.CompareResult.#ctor(System.String,System.String,System.Double,System.Int32)">
            <summary>
            构造一个TV比对结果对象，对象只有TV分值
            综合得分等于TV分值
            </summary>
            <param name="sourceId">比对源对象ID</param>
            <param name="targetId">比对目标对象ID</param>  
            <param name="tvScroe">TV比对原始得分</param>         
            <param name="timeLen">TV得分</param>  
        </member>
        <member name="M:Speech.Engine.Isve.Data.CompareResult.#ctor(System.String,System.String,System.Double,System.Double,System.Double)">
            <summary>
            构造一个(EC、TV)比对结果对象，对象包含EC分值，也包含TV分值
            综合得分由EC与TV分值根据权重计算得出
            </summary>
            <param name="sourceId">比对源对象ID</param>
            <param name="targetId">比对目标对象ID</param>
            <param name="tvScroe">TV比对得分</param>
            <param name="ecScroe">EC比对得分</param>
            <param name="tvWeight">TV分得在综合得分中的权重，取0~1间的小数值</param>
        </member>
        <member name="M:Speech.Engine.Isve.Data.CompareResult.#ctor(System.String,System.String,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            构造一个(EC、TV)比对结果对象，对象包含EC分值，也包含TV分值
            综合得分由EC与TV分值根据权重计算得出
            </summary>
            <param name="sourceId">比对源对象ID</param>
            <param name="targetId">比对目标对象ID</param>
            <param name="speaker">比对目标 说话人序号(0|1)</param>
            <param name="tvScroe">TV比对得分</param>
            <param name="ecScroe">EC比对得分</param>
            <param name="tvWeight">TV分得在综合得分中的权重，取0~1间的小数值</param>
        </member>
        <member name="M:Speech.Engine.Isve.Data.CompareResult.AdjustWeight(System.Double)">
            <summary>
            调整TV权重，计算综合得分。算法中需要考虑只有一个局部分值的情况，如只有TV分。
            计算得份将存入_scroe字段，再次调用Calculate方法时，直接返回_scroe字段值。
            </summary>
            <param name="tvWeight">TV分得在综合得分中的权重，取0~1间的小数值</param>
            <returns>综合得分</returns>
        </member>
        <member name="M:Speech.Engine.Isve.Data.CompareResult.CompareTo(Speech.Engine.Isve.Data.CompareResult)">
            <summary>
            最终得分对比
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Speech.Engine.Isve.Data.CompareResult.SourceId">
            <summary>
            比对源
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.CompareResult.TargetId">
            <summary>
            比对目标
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.CompareResult.TvScroe">
            <summary>
            TV比对原始得分
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.CompareResult.EcScroe">
            <summary>
            EC测试得分
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.CompareResult.Weight">
            <summary>
            综合得分中TV分值所占比重
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.CompareResult.Scroe">
            <summary>
            综合得分(规整后的得分)
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.CompareResult.TimeLen">
            <summary>
            有效时长(毫秒)
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Data.CompareResultList">
            <summary>
            包含多个比对结果的列表。
            通过GetTopList方法可以直接获取已按分值排序的TOP列表
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Data.CompareResultList.GetTopList(System.Int32)">
            <summary>
            获取当前列表中得分最高的TOP子列表
            </summary>
            <param name="intLength">获取TOP的数量</param>
            <returns>按得分排序后的比对结果列表</returns>
        </member>
        <member name="T:Speech.Engine.Isve.Data.DataBuffer">
            <summary>
            用于在内存中分配的字节数据。
            对象在构造时即固定长度。
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Data.DataBuffer.#ctor(System.Byte[])">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Data.DataBuffer.#ctor(System.Int64)">
            <summary>
            构造函数。传递需要建立的缓冲区大小。
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Data.DataBuffer.SubData(System.Int64,System.Int64)">
            <summary>
            获取数据指定位置的一个片断
            </summary>
            <param name="lngStartIndex">数据开始位置</param>
            <param name="lngLength">数据结束位置</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.Data.DataBuffer.SubData(System.Int64)">
            <summary>
            获取数据指定位置的一个片断
            </summary>
            <param name="lngStartIndex">片断开始位置</param>
            <returns></returns>
        </member>
        <member name="P:Speech.Engine.Isve.Data.DataBuffer.Buffer">
            <summary>
            【传入、传出】文件数据字节
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Data.EcModel">
            <summary>
            EC注册所得的模型数据，不包含TV模型数据在其中。压缩后的数据在78K左右。
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Data.IsveDataBaseExtend.IsValidObject(Speech.Engine.Isve.Data.IsveDataBase)">
            <summary>
            判断某个对象是否是一个有效的数据
            <para>有效条件是非空、数据有字节内容</para>
            </summary>
            <param name="obj">可以是任意的IsveDataBase子类数据对象</param>
            <returns>是否有效</returns>
        </member>
        <member name="M:Speech.Engine.Isve.Data.IsveDataBaseExtend.CheckValid(Speech.Engine.Isve.Data.IsveDataBase)">
            <summary>
            检测 某个对象是否是一个有效的数据
            <para>如果不是，将抛出 IsveException</para>
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Speech.Engine.Isve.Data.IsveDataBaseExtend.CheckValid(Speech.Engine.Isve.Data.IsveDataBase,System.String)">
            <summary>
            检测 某个对象是否是一个有效的数据
            <para>如果不是，将抛出 IsveException</para>
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Speech.Engine.Isve.Data.IsveModel">
            <summary>
            表示在（EC、TV）模式下生成的声纹模型
            该模型中包含三部分内容：模型说明（1024字节）、EC模型数据(78KB)、TV模型数据（400字节）
            注意，引擎需要配置为压缩模型，否则模型数据将增大一倍，算法将需要调整。
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Data.IsveModel.TV_SIZE">
            <summary>
            TV模型大小
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Data.IsveModel.HEAD_SIZE">
            <summary>
            声纹模型中头信息大小
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Data.IsveModel.GetECModelPart">
            <summary>
            获取（EC、TV）模型中的EC模型数据
            （暂不使用）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.Data.IsveModel.GetTVModelPart">
            <summary>
            获取（EC、TV）模型中的TV模型数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.Data.IsveModel.GetTvNormModel">
            <summary>
            Calculaters the tv norm model.
            </summary>
            <param name="plpFeatures">The PLP features.</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.Data.IsveModel.GetTvNormModelByPerl(System.Collections.Generic.List{Speech.Engine.Isve.Data.TvModel})">
            <summary>
            Calculaters the tv norm model.
            </summary>
            <param name="tvModelList">资源模型</param>
            <returns></returns>
        </member>
        <member name="T:Speech.Engine.Isve.Data.PlpFeature">
            <summary>
            表示某个PLP数据对象
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.PlpFeature.Handset">
            <summary>
            特征语音的信道，暂时无效
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.PlpFeature.Duration">
            <summary>
            特征的时长
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.PlpFeature.Level">
            <summary>
            暂时无效
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.PlpFeature.Snr">
            <summary>
            暂时无效
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.PlpFeature.Clipped">
            <summary>
            暂时无效
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.PlpFeature.Truncated">
            <summary>
            是否有截幅，0 表示无 、1表示有
            </summary>
        </member>
        <member name="P:Speech.Engine.Isve.Data.PlpFeature.DateCreated">
            <summary>
            创建的时间
            </summary>         
        </member>
        <member name="T:Speech.Engine.Isve.Data.TvModel">
            <summary>
            TV模型数据，压缩后400字节左右。不包含模型头信息。
            由200个浮点数据所组成，但在压缩时使用定点运算的方式，将数据变成了无符号整型
            所以在比对之前需要还原为浮点数（X/30000.0 - 1)
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.Data.TvModel.VALUE_ITEM_COUNT">
            <summary>
            TV模型中的数据个数，目前使用提200个浮点数
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvModel.#ctor(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="timeLength">有效时长[单位:秒]</param>
        </member>
        <member name="M:Speech.Engine.Isve.Data.TvModel.ConvertToDoubleArray">
            <summary>
            将模型中的数据由被压缩的字节，转移成为浮点数组
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Data.UtrFeature">
            <summary>
            表示某个UTR数据对象
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.EcTvModelComparer">
            <summary>
            传入待比对的UTR和PLP，与其他的模型进行比对，返回得分。
            传入的模型是EC与TV混合的模型数据。
            支持比量比对。
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.EcTvModelComparer._tvWeight">
            <summary>
            TV所占比重
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.EcTvModelComparer.#ctor(System.Double)">
            <summary>
            建立一个用于EC、TV模型比对的计算实例
            </summary>
            <param name="tvWeight">比对分值中,TV数据所占权重。（取0-1间的小数）</param>
        </member>
        <member name="M:Speech.Engine.Isve.EcTvModelComparer.Compare(Speech.Engine.Isve.Data.PlpFeature,Speech.Engine.Isve.Data.IsveModel)">
            <summary>
            将PLP和UTR与另一个模型比对，返回比对的结果得份对象
            </summary>
            <param name="sourcePlpFeature">PLP对象数据</param>
            <param name="targetModel">待比对目标模型对象</param>
            <returns>比对的结果对象，其中使用PLP作为源UUID、TargetMode作为目标UUID</returns>
        </member>
        <member name="M:Speech.Engine.Isve.EcTvModelComparer.Compare(Speech.Engine.Isve.Data.PlpFeature,Speech.Engine.Isve.Data.UtrFeature,Speech.Engine.Isve.Data.IsveModel)">
            <summary>
            将PLP和UTR与另一个模型比对，返回比对的结果得份对象
            </summary>
            <param name="sourcePlpFeature">PLP对象数据</param>
            <param name="sourceUtrFeature">UTR对象数据</param>
            <param name="targetModel">待比对目标模型对象</param>
            <returns>比对的结果对象，其中使用PLP作为源UUID、TargetMode作为目标UUID</returns>
        </member>
        <member name="F:Speech.Engine.Isve.EcTvModelComparer._resultList">
            <summary>
            用于内部存放批量比对结构列表
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.EcTvModelComparer._sourcePlpFeature">
            <summary>
            批量比对时待比对的PLP特征数据
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.EcTvModelComparer.BeginCompare(Speech.Engine.Isve.Data.PlpFeature)">
            <summary>
            开始批量比对，之后调用CompareTo方法进行比对，以及EndCompare方法结束比对
            </summary>
            <param name="sourcePlpFeature">PLP对象数据</param>
        </member>
        <member name="M:Speech.Engine.Isve.EcTvModelComparer.BeginCompare(Speech.Engine.Isve.Data.PlpFeature,Speech.Engine.Isve.Data.UtrFeature)">
            <summary>
            开始批量比对，之后调用CompareTo方法进行比对，以及EndCompare方法结束比对
            </summary>
            <param name="sourcePlpFeature">PLP对象数据</param>
            <param name="sourceUtrFeature">UTR对象数据</param>
        </member>
        <member name="M:Speech.Engine.Isve.EcTvModelComparer.CompareTo(Speech.Engine.Isve.Data.IsveModel)">
            <summary>
            开始批量后，进行某一个模型的比对
            比对将果将存放于List中，比对完成后可以调用End操作获取List列表
            </summary>
            <param name="targetModel">比对的目标模型</param>
            <returns>本次比对的单个结果</returns>
        </member>
        <member name="M:Speech.Engine.Isve.EcTvModelComparer.EndCompare">
            <summary>
            结果批量比对，返回批量比对的结果列表
            </summary>
            <returns>批量比对的结果列表</returns>
        </member>
        <member name="F:Speech.Engine.Isve.EcTvModelComparer._plpFeatureHandle">
            <summary>
            在begin时存储特征句柄，End时将用它来释放资源
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.EcTvModelComparer.IdentifyBegin(Speech.Engine.Isve.Data.PlpFeature,Speech.Engine.Isve.Data.UtrFeature)">
            <summary>
            开始一次比对
            </summary>
            <param name="sourcePlpFeature">待比对源的PLP特征</param>
            <param name="sourceUtrFeature">待比对源的UTR特征，可以为空</param>
        </member>
        <member name="M:Speech.Engine.Isve.EcTvModelComparer.Identify(Speech.Engine.Isve.Data.IsveModel)">
            <summary>
            执行一次比对
            </summary>
            <param name="targetModel">比对目标模型，（EC、TV）模型数据对象</param>
            <returns>比对结果结构数据，需要再次处理为业务层数据对象</returns>
        </member>
        <member name="M:Speech.Engine.Isve.EcTvModelComparer.IdentifyEnd">
            <summary>
            结束比对
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.Exceptions.IsveException">
            <summary>
            ISVE 引擎异常
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.Exceptions.IsveException.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.Isve.Exceptions.IsveException"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Exceptions.IsveException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Speech.Engine.Isve.Exceptions.IsveException"/> class.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Speech.Engine.Isve.Exceptions.IsveException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.Isve.Exceptions.IsveException"/> class with
            the specified message.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Exceptions.IsveException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            <para>默认不可重试、恢复</para>
            </summary>
            <param name="message">A message to include with the exception.</param>
            <param name="innerException">A nested exception to include.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.Isve.Exceptions.IsveException"/> class
            with the specified message and inner exception.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.Isve.Exceptions.IsveException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="isReparable">是否可以重试、恢复</param>
        </member>
        <member name="M:Speech.Engine.Isve.Exceptions.IsveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            为序列化提供的构造函数
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Speech.Engine.Isve.ModelCalculater">
            <summary>
            使用VE引擎通过传入的PLP计算模型。
            需要将引擎配置为（EC、TV）模式，注册反馈的数据中包含EC和TV两个模型。
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.ModelCalculater.Calculater(Speech.Engine.Isve.Data.PlpFeature)">
            <summary>
            计算返回得到的模型数据对象。
            IsveModel对象中，包含了TV与EC两个模型。所以对引擎要求配置为(EC、TV)模式。
            </summary>
            <param name="plpFeature">PLP数据对象</param>
            <returns>ISVE声纹模型，包含EC与TV数据</returns>
        </member>
        <member name="M:Speech.Engine.Isve.ModelCalculater.Calculater(Speech.Engine.Isve.Data.PlpFeature[])">
            <summary>
            实现传入PLP特征数组，将多个PLP注册为单个声纹模型
            IsveModel对象中，包含了TV与EC两个模型。所以对引擎要求配置为(EC、TV)模式。
            </summary>
            <param name="plpFeatures">PLP数据对象数组</param>
            <returns>ISVE声纹模型，包含EC与TV数据</returns>
        </member>
        <member name="M:Speech.Engine.Isve.ModelCalculater.TvNorm(Speech.Engine.Isve.Data.TvModel)">
            <summary>
            Calculaters the tv norm model.
            </summary>
            <param name="plpFeatures">The PLP features.</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.ModelCalculater.GenerateModel(Speech.Engine.Isve.Data.PlpFeature[])">
            <summary>
            实现传入PLP特征数组，将多个PLP注册为单个声纹模型
            </summary>
            <param name="plpFeatures">PLP数据对象数据</param>
            <returns>作为IsveModel模型对象返回，需要在接收后转换为其他类型</returns>
        </member>
        <member name="T:Speech.Engine.Isve.PlpCalculater">
            <summary>
            使用VE引擎计算音频文件的PLP特征。
            只可以传入被预处理过的音频数据。
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.PlpCalculater.Calculater(Speech.Engine.Isve.Data.AudioData)">
            <summary>
            计算音频的PLP数据，返回封装的PLP对象。
            </summary>
            <param name="audioData">音频数据对象</param>
            <returns>PLP数据对象</returns>
        </member>
        <member name="T:Speech.Engine.Isve.TvModelComparer">
            <summary>
            传入两个TV模型，通过算法比对返回得分(原始分)。支持批量比对。
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.TvModelComparer._resultList">
            <summary>
            用于BeginEnd模式下内部存放批量比对结构列表
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.TvModelComparer._sourceModel">
            <summary>
            用于BeginEnd模式下存入待比对模型
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.TvModelComparer._sourceModelDataArray">
            <summary>
            用于BeginEnd模式下缓存源对象的浮点比对数组
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.TvModelComparer.Compare(Speech.Engine.Isve.Data.TvModel,Speech.Engine.Isve.Data.TvModel)">
            <summary>
            比较两个TV模型，返回比对的结果得份对象。
            TV比对不需要借助于VE引擎，可以通过实现比对算法实现结果的返回
            </summary>
            <param name="sourceModel"></param>
            <param name="targetModel"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.TvModelComparer.BeginCompare(Speech.Engine.Isve.Data.TvModel)">
            <summary>
            开始批量比对，之后调用CompareTo方法进行比对，以及EndCompare方法结束比对
            </summary>
            <param name="sourceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.TvModelComparer.CompareTo(Speech.Engine.Isve.Data.TvModel)">
            <summary>
            开始批量后，进行某一个模型的比对
            </summary>
            <param name="targetModel"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.TvModelComparer.EndCompare">
            <summary>
            结果批量比对，返回批量比对的结果列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.TvModelComparer.CosDist(System.Double[],System.Double[])">
            <summary>
            分值计算算法
            比对两个TV模型数据的浮点数组，返回一个得份值
            </summary>
        </member>
        <member name="T:Speech.Engine.Isve.TvNormModelComparer">
            <summary>
            传入一个TV模型和一个TVNorm模型 进行比对并规整Tv得分。支持批量比对。
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.TvNormModelComparer._sourceTvModel">
            <summary>
            用于BeginEnd模式下存入待比对模型
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.TvNormModelComparer._tvModelComparer">
            <summary>
            用于BeginEnd模式下 原始TvModel比对器
            </summary>
        </member>
        <member name="F:Speech.Engine.Isve.TvNormModelComparer._sourceTvNormData">
            <summary>
            待比对Tv规整模型数据
            </summary>
        </member>
        <member name="M:Speech.Engine.Isve.TvNormModelComparer.Compare(Speech.Engine.Isve.Data.TvModel,Speech.Engine.Isve.Data.TvNormModel)">
            <summary>
            比较两个TV模型，返回比对的结果得分对象。
            TV比对不需要借助于VE引擎，可以通过实现比对算法实现结果的返回
            </summary>
            <param name="confirmingModel">待确认Tv模型</param>
            <param name="sourceTvNormModel">待比对的源Tv规整模型</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.TvNormModelComparer.BeginCompare(Speech.Engine.Isve.Data.TvModel)">
            <summary>
            开始批量比对，之后调用CompareTo方法进行比对，以及EndCompare方法结束比对
            </summary>
            <param name="sourceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.TvNormModelComparer.CompareTo(Speech.Engine.Isve.Data.TvNormModel)">
            <summary>
            开始批量后，进行某一个模型的比对
            </summary>
            <param name="targetModel"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.TvNormModelComparer.BeginCompareN(Speech.Engine.Isve.Data.TvNormModel)">
            <summary>
            开始批量比对，之后调用CompareToN方法进行比对，以及EndCompare方法结束比对
            </summary>
            <param name="sourceNormModel">待比对的规整模型数据</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.TvNormModelComparer.CompareToN(Speech.Engine.Isve.Data.TvModel)">
            <summary>
            开始批量后，进行某一个模型的比对
            </summary>
            <param name="targetTvModel"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.TvNormModelComparer.EndCompare">
            <summary>
            结果批量比对，返回批量比对的结果列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Isve.UtrCalculater.Calculater(Speech.Engine.Isve.Data.PlpFeature)">
            <summary>
            计算返回PLP对象的UTR数据
            </summary>
            <param name="plpFeature">PLP数据对象</param>
            <returns>UTR数据对象</returns>
        </member>
        <member name="T:Speech.Engine.Kws.KwsIndex">
            <summary>
            关键词检出工作单元
            <para>传入：cn 1bast</para>
            <para>线程不安全</para>
            </summary>
        </member>
        <member name="F:Speech.Engine.Kws.KwsIndex._vst">
            <summary>
            关键词操作实例
            </summary>
        </member>
        <member name="M:Speech.Engine.Kws.KwsIndex.#ctor">
            <summary>
            KWSWorker构造函数
            </summary>
        </member>
        <member name="M:Speech.Engine.Kws.KwsIndex.DoDetection(System.String)">
            <summary>
            针对当前关键词检出实例进行检出符合条件的关键词
            </summary>
            <param name="keywordExpression">关键词检出表达式</param>
            <returns>关键词检出结果</returns>
        </member>
        <member name="M:Speech.Engine.Kws.KwsIndex.DoIndex(System.Int32,System.DateTime,System.Collections.Generic.List{Speech.Data.LatticeItem})">
            <summary>
            将音频送入引擎进行解码,并建立关键词索引
            </summary>
            <param name="audioId">音频Id</param>
            <param name="audioDatetime">音频时间</param>
            <param name="latticeItemList">音频数据</param>
        </member>
        <member name="T:Speech.Engine.Kws.KwsApi">
            <summary>
            [kws20]关键词引擎 应用系统API
            <para>基于KWS20版本进行构建</para>
            </summary>
        </member>
        <member name="F:Speech.Engine.Kws.KwsApi.ENGIN_PATH_INDEX">
            <summary>
            索引引擎地址
            </summary>
        </member>
        <member name="F:Speech.Engine.Kws.KwsApi.ENGIN_PATH_SEARCH">
            <summary>
            检索引擎地址
            </summary>
        </member>
        <member name="F:Speech.Engine.Kws.KwsApi.ENGINE_PATH_CONFIG">
            <summary>
            Kws引擎配置文件位置
            <para>默认情况下:在引擎dll目录下的 win64api目录下</para>
            </summary>
        </member>
        <member name="F:Speech.Engine.Kws.KwsApi.PLATFORM">
            <summary>
            引擎所在根目录
            </summary>
        </member>
        <member name="M:Speech.Engine.Kws.KwsApi.KWS_Initialize(System.String,System.String)">
            <summary>
            初始化关键词检出系统，进程级全局初始化函数，根据传入的配置文件初始化关键词检出系统，一个进程只需调用一次。
            </summary>
            <param name="szConfig">配置文件的本地路径；</param>
            <param name="indexDir"></param>
            <returns>返回值：TRUE：关键词检出初始化成功；FALSE：关键词检出初始化失败；</returns>
            <remarks>
            BOOL __declspec(dllexport) KWS_Initialize(const char* szConfig);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Kws.KwsApi.KWS_IsInitialized">
            <summary>
            判断关键词检出系统是否正处于初始化状态
            </summary>
            <returns>
            返回：
            TRUE：关键词检出系统已经处于初始化状态。
            FALSE：关键词检出系统处于为初始化状态。
            </returns>
            <remarks>
            BOOL __declspec(dllexport) KWS_IsInitialized();
            </remarks>
        </member>
        <member name="M:Speech.Engine.Kws.KwsApi.KWS_PushWavData(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            写入语音数据
            <para>TRUE：传入的音频中包含了有效的内容。</para>
            <para>FALSE：传入的音频中没有包含有效的内容。</para>
            <para></para>
            <para>[2.0.64.6版本(含)前，PushData后同时解码]</para>
            <para>[2.0.64.7版本后，之PushData,解码需要调用 KWS_StartDecode]</para>
            </summary>
            <param name="instancePtr">关键词识别实例的指针</param>
            <param name="sWavBuf">指向存放音频数据的内存区域的首地址的指针</param>
            <param name="nLength">音频数据的字节个数</param>
            <param name="nID">语音的业务ID</param>
            <param name="pWavInfo">
            语音自定义属性
            <para>多个字段属性，中间用\t分隔</para>
            </param>
            <returns>
            TRUE：传入的音频中包含了有效的内容。
            FALSE：传入的音频中没有包含有效的内容。
            </returns>
            <remarks>
            bool __declspec(dllexport) KWS_PushWavData(HSRInstance hnst,const char* sWavBuf, const int nLength,const int nID, const char* pWavInfo);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Kws.KwsApi.KWS_StartDecode(System.IntPtr)">
            <summary>
            开始解码[2.0.64.7版本新增]
            </summary>
            <param name="instancePtr"></param>
            <returns></returns>
            <remarks>
            bool __declspec(dllexport) StartDecode(HSRInstance hnst);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Kws.KwsApi.KWS_StartIndex(System.IntPtr,System.String,System.String,System.Int32,System.String)">
            <summary>
            根据cn和1bast直接建索引
            </summary>
            <param name="instancePtr"></param>
            <param name="p1BestFile"></param>
            <param name="pCnFile"></param>
            <param name="nID">语音的业务ID</param>
            <param name="pWavInfo">
            语音自定义属性
            <para>多个字段属性，中间用\t分隔</para>
            </param>
            <returns></returns>
            <remarks>
            int  KWS_Start_Index(HSRInstance hnst, const char* p1BestFile, const char* pCnFile, int nID, const char* pWavInfo); // 增加建索引接口
            </remarks>
        </member>
        <member name="M:Speech.Engine.Kws.KwsApi.KWS_Detection(System.IntPtr,System.String,System.IntPtr@)">
            <summary>
            关键词检出
            </summary>
            <param name="instancePtr">关键词识别实例的指针</param>
            <param name="keywordsExpression">关键词检索表达式</param>
            <param name="result_pointer"> 关键词检出的结果字符串指针</param>
            <returns>
            TRUE：返回正确。
            FALSE：返回失败
            </returns>
            <remarks>
            bool __declspec(dllexport) KWS_Detection(HSRInstance hnst,char** szDstFile);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Kws.KwsApi.KWS_ReleasePointer(System.IntPtr@)">
            <summary>
            释放 KWS_Detection结果中的指针
            <para>void __declspec(dllexport) KWS_ReleasePointer(char** szDstFile);</para>
            </summary>
            <param name="result_pointer">检出结果指针</param>
            <returns></returns>
            <remarks>
            void __declspec(dllexport) KWS_ReleasePointer(char** szDstFile);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Kws.KwsApi.KWS_GetInstance(System.Int32)">
            <summary>
            获取一个关键词检出实例对象
            </summary>
            <param name="nBizID">所需要获取的关键词检出实例的业务号（进程号）</param>
            <returns>
            如果成功获取关键词识别实例，则返回关键词识别实例的指针，否则返回NULL。
            </returns>
            <remarks>
            HSRInstance __declspec(dllexport) KWS_GetInstance(const int nBizID);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Kws.KwsApi.KWS_ReleaseInstance(System.IntPtr)">
            <summary>
            释放指定实例
            </summary>
            <param name="instancePtr">实例指针</param>
            <returns></returns>
            <remarks>
            void __declspec(dllexport) KWS_ReleaseInstance(HSRInstance hInst);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Kws.KwsApi.KWS_Uninitialize">
            <summary>
            逆初始化并关闭关键词检出系统，卸载使用的各个DLL，释放关键词检出系统占用的所有系统资源。
            </summary>
            <returns></returns>
            <remarks>
            void __declspec(dllexport)  KWS_Uninitialize();
            </remarks>
        </member>
        <member name="M:Speech.Engine.Kws.KwsApi.KWSSearch_Initialize(System.String,System.String)">
            <summary>
            初始化关键词检索系统，进程级全局初始化函数，根据传入的配置文件初始化关键词检索系统。
            </summary>
            <param name="engineConfigPath">配置文件的本地路径</param>
            <param name="indexDir">索引目录</param>
            <returns></returns>
            <remarks>
            bool __declspec(dllexport) KWSSearch_Initialize(const char* szConfig,const char* szResdir);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Kws.KwsApi.KWSSearch_Retrieval(System.String,System.String,System.IntPtr@)">
            <summary>
            关键词查询
            </summary>
            <param name="sKeyword">
            需要检索的关键词
            <para>格式： 或包含(有其一都可);与包含(必须同时包含);非包含(不包含)</para>
            </param>
            <param name="pFieldExpression">检索的字段条件</param>
            <param name="result_pointer">关键词搜索的结果字符串指针</param>
            <returns>
            TRUE：返回正确。
            FALSE：返回失败
            </returns>
            <remarks>
            int	__declspec(dllexport)  KWSSearch_Retrieval(const char* szWord);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Kws.KwsApi.KWSSearch_DeleteStrPointer(System.IntPtr@)">
            <summary>
            释放检索结果指针
            </summary>
            <param name="searchResultPtr">检索结果指针</param>
            <remarks>
            void __declspec(dllexport) KWSSearch_DeleteStrPointer(char** pString);
            </remarks>		
        </member>
        <member name="M:Speech.Engine.Kws.KwsApi.KWSSearch_Uninitialize">
            <summary>
            逆初始化并关闭关键词检索系统，卸载使用的各个DLL，释放关键词检索系统占用的所有系统资源。
            </summary>
            <remarks>
            void __declspec(dllexport)  KWSSearch_Uninitialize();
            </remarks>
        </member>
        <member name="T:Speech.Engine.Kws.KwsEngineResult">
            <summary>
            KWS引擎检出 输出结果
            </summary>
        </member>
        <member name="M:Speech.Engine.Kws.KwsEngineResult.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="xml">关键词引擎检索XML结果</param>
        </member>
        <member name="M:Speech.Engine.Kws.KwsEngineResult.ToString">
            <summary>
            覆写ToString,显示结果的Xml结果字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:Speech.Engine.Kws.KwsEngineResult.KwsMatchResults">
            <summary>
            关键词检索/检出列表
            </summary>
        </member>
        <member name="P:Speech.Engine.Kws.KwsEngineResult.Message">
            <summary>
            成功或者失败的详细信息
            </summary>
        </member>
        <member name="P:Speech.Engine.Kws.KwsEngineResult.State">
            <summary>
            0 (异常消息)，如0表示成功,如果1表示失败
            </summary>
        </member>
        <member name="P:Speech.Engine.Kws.KwsEngineResult.XML">
            <summary>
            检索出来的实际的XML
            </summary>
        </member>
        <member name="T:Speech.Engine.Kws.KwsVoiceContentItem">
            <summary>
            检出关键词的检索匹配到语音的内容信息
            </summary>
        </member>
        <member name="P:Speech.Engine.Kws.KwsVoiceContentItem.BestContent">
            <summary>
            匹配到的句子内容
            </summary>
        </member>
        <member name="P:Speech.Engine.Kws.KwsVoiceContentItem.Confidence">
            <summary>
            置信度
            </summary>
        </member>
        <member name="P:Speech.Engine.Kws.KwsVoiceContentItem.Keyword">
            <summary>
            音频包含的关键词
            </summary>
        </member>
        <member name="P:Speech.Engine.Kws.KwsVoiceContentItem.SentenceEndTime">
            <summary>
            句子结束时间[单位：毫秒]
            </summary>
        </member>
        <member name="P:Speech.Engine.Kws.KwsVoiceContentItem.SentenceStartTime">
            <summary>
            句子开始时间[单位：毫秒]
            </summary>
        </member>
        <member name="P:Speech.Engine.Kws.KwsVoiceContentItem.WordEndTime">
            <summary>
            词的结束时间[单位：毫秒]
            </summary>
        </member>
        <member name="P:Speech.Engine.Kws.KwsVoiceContentItem.WordStartTime">
            <summary>
            词的开始时间[单位：毫秒]
            </summary>
        </member>
        <member name="T:Speech.Engine.Kws.KwsVoiceMatchItem">
            <summary>
            关键词引擎得到的语音匹配项
            </summary>
            <remarks>
            每个匹配项 是 一个语音的 关键词检索结果信息. 信息包含符合的关键词信息
            </remarks>
        </member>
        <member name="M:Speech.Engine.Kws.KwsVoiceMatchItem.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele"></param>
        </member>
        <member name="P:Speech.Engine.Kws.KwsVoiceMatchItem.KwsContentItems">
            <summary>
            每条语音检索得到的详细关键词信息集合
            </summary>
        </member>
        <member name="P:Speech.Engine.Kws.KwsVoiceMatchItem.VoiceKId">
            <summary>
            语音的KId
            </summary>
        </member>
        <member name="T:Speech.Engine.Kws.KwsException">
            <summary>
            KWS引擎异常
            </summary>
        </member>
        <member name="M:Speech.Engine.Kws.KwsException.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.Kws.KwsException"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.Kws.KwsException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.Kws.KwsException"/> class with
            the specified message.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.Kws.KwsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            <para>默认不可重试、恢复</para>
            </summary>
            <param name="message">A message to include with the exception.</param>
            <param name="innerException">A nested exception to include.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.Kws.KwsException"/> class
            with the specified message and inner exception.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.Kws.KwsException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="isReparable">是否可以重试、恢复</param>
        </member>
        <member name="M:Speech.Engine.Kws.KwsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            为序列化提供的构造函数
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Speech.Engine.Kws.KwsIndexEngine">
            <summary>
            关键词[检出]引擎
            <para>初始化的引擎包含:检出引擎和建索引擎</para>
            该类是引擎环境控制类，主要用于对引擎的加载初始化与逆初始化。
            初始化与逆初始化在应用中只能做一次，所以该类的使用应放在应用程序的启动与退出场景中。
            </summary>
        </member>
        <member name="F:Speech.Engine.Kws.KwsIndexEngine._hasInitialize">
            <summary>
            用于标识引擎是否已被初始化。对引擎初始化与逆初始化时，需要对该域值做同步，防止被初始化多次。
            </summary>
        </member>
        <member name="F:Speech.Engine.Kws.KwsIndexEngine._synRoot">
            <summary>
            内部操作同步对象
            </summary>
        </member>
        <member name="M:Speech.Engine.Kws.KwsIndexEngine.Initialize(System.String,System.String)">
            <summary>
            对引擎进行初始化
            </summary>
            <param name="enginePath">引擎路径[暂未使用]</param>
            <param name="indexPath">引擎关联的索引路径</param>
        </member>
        <member name="M:Speech.Engine.Kws.KwsIndexEngine.Uninitialize">
            <summary>
            逆初始化引擎
            </summary>
        </member>
        <member name="P:Speech.Engine.Kws.KwsIndexEngine.HasInitialize">
            <summary>
            引擎是否已被初始化
            </summary>
        </member>
        <member name="T:Speech.Engine.Kws.KwsSearchEngine">
            <summary>
            关键词[检索]引擎
            </summary>
        </member>
        <member name="F:Speech.Engine.Kws.KwsSearchEngine._hasInitialize">
            <summary>
            用于标识引擎是否已被初始化。对引擎初始化与逆初始化时，需要对该域值做同步，防止被初始化多次。
            </summary>
        </member>
        <member name="F:Speech.Engine.Kws.KwsSearchEngine._synRoot">
            <summary>
            内部操作同步对象
            </summary>
        </member>
        <member name="M:Speech.Engine.Kws.KwsSearchEngine.Initialize(System.String,System.String)">
            <summary>
            对引擎进行初始化
            </summary>
            <param name="port">目前是配置的端口号</param>
            <param name="enginePath">引擎路径</param>
            <param name="indexPath">引擎关联的索引路径</param>
        </member>
        <member name="M:Speech.Engine.Kws.KwsSearchEngine.Uninitialize">
            <summary>
            逆初始化引擎
            </summary>
        </member>
        <member name="P:Speech.Engine.Kws.KwsSearchEngine.HasInitialize">
            <summary>
            引擎是否已被初始化
            </summary>
        </member>
        <member name="T:Speech.Engine.Kws.KwsSearcher">
            <summary>
            关键词检索器
            <para>线程不安全，外部调用时需要注意</para>
            </summary>
        </member>
        <member name="M:Speech.Engine.Kws.KwsSearcher.DoSearch(System.String)">
            <summary>
            在索引中检索关键词
            </summary>
            <param name="kwsExpression">需要检索的关键词表达式</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Kws.KwsSearcher.DoSearch(System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            在索引中检索关键词
            </summary>
            <param name="idList">
            检索id列表中的语音
            <para>id列表</para>
            </param>
            <param name="kwsExpression">
            需要检索的关键词表达式
            <para>组合查询是关键词有三类，不同类之间以“;”隔开，相同类里的多个关键词以空格隔开</para>
            <para>KWSSearch_Retrieval("A B;C D;E F");	//表示检索包含A或B，同时包含C和D，但不包含E和F</para>
            <para>KWSSearch_Retrieval(";C D;E F");	//表示检索同时包含C和D，但不包含E和F</para>
            <para>KWSSearch_Retrieval(";C D;");	//表示检索同时包含C和D</para>
            <para>KWSSearch_Retrieval("(A|B);C D;");	//表示检索包含A或B，同时包含C和D</para>
            <para>KWSSearch_Retrieval("A|B|C|D");	//表示检索包含A或B或C或D</para>
            <para>KWSSearch_Retrieval("或包含();与包含(必须同时包含);非包含(不包含)");</para>
            </param>  
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Kws.KwsSearcher.DoSearch(System.String,System.String)">
            <summary>
            在索引中检索关键词
            </summary>
            <param name="conditonExpression">
             检索条件表达式
            </param>
            <param name="kwsExpression">
            需要检索的关键词表达式
            <para>组合查询是关键词有三类，不同类之间以“<![CDATA[&]]>”隔开，相同类里的多个关键词以空格隔开</para>
            </param>  
            <returns></returns> 
        </member>
        <member name="T:Speech.Engine.Lid.LidSdcIvector">
            <summary>
            LidSdcIvector
            </summary>
        </member>
        <member name="F:Speech.Engine.Lid.LidSdcIvector.DIM_COUNT">
            <summary>
            维度
            </summary>
        </member>
        <member name="F:Speech.Engine.Lid.LidSdcIvector.fLIDMeanAbsMaxCoefTmp">
            <summary>
            此table是归一化系数
            </summary>
        </member>
        <member name="M:Speech.Engine.Lid.LidSdcIvector.#ctor">
            <summary>
            LidSdcIvector
            </summary>
        </member>
        <member name="M:Speech.Engine.Lid.LidSdcIvector.#ctor(System.Int32,System.Int32)">
            <summary>
            LidSdcIvector
            </summary>
            <param name="sdc_fea_len"></param>
            <param name="v_fea_len"></param>
        </member>
        <member name="M:Speech.Engine.Lid.LidSdcIvector.GetHtkSdcFea(System.Boolean)">
            <summary>
             获取SDC特征的HTK格式数据
            </summary>
            <param name="isSwap">是否高低字节转换 默认：true 转换</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Lid.LidSdcIvector.GetIvectorFea">
            <summary>
            获取Ivector Fea float数列表
            </summary>
            <returns></returns>
        </member>
        <member name="P:Speech.Engine.Lid.LidSdcIvector.SdcFeaBuffer">
            <summary>
            SdcFeaBuffer 
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidSdcIvector.IvectorFeaBuffer">
            <summary>
            IvectorFeaBuffer 
            </summary>
        </member>
        <member name="T:Speech.Engine.Lid.LidTvTag">
            <summary>
            语种识别结果Tag
            </summary>
        </member>
        <member name="M:Speech.Engine.Lid.LidTvTag.#ctor(System.String)">
            <summary>
            带参构造函数
            </summary>
            <param name="xml">对象对应的XML字符串</param>
        </member>
        <member name="M:Speech.Engine.Lid.LidTvTag.ToString">
            <summary>
            重写ToString方法
            </summary>
            <returns>返回对象对应的XML文件</returns>
        </member>
        <member name="P:Speech.Engine.Lid.LidTvTag.IsValidLid">
            <summary>
            是否有效的Lid处理结果 
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTvTag.result_xml">
            <summary>
            原始XML字符串
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTvTag.returncode">
            <summary>
            返回代码
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTvTag.segment_count">
            <summary>
            测试片段个数
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTvTag.lang_count">
            <summary>
            能识别语种lan_count总数
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTvTag.valid_frames">
            <summary>
            总的有效帧数
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTvTag.language">
            <summary>
            总的识别语种
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTvTag.gender">
            <summary>
            整句的性别
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTvTag.backend">
            <summary>
            backend信息
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTvTag.segment_list">
            <summary>
            各个语音段的信息
            <para>包含:片段编号,片段男女,语种,片段开始时间,片段结束时间</para>
            </summary>
        </member>
        <member name="T:Speech.Engine.Lid.lid_backend">
            <summary>
            模型/后端处理模型的得分信息
            </summary>
        </member>
        <member name="M:Speech.Engine.Lid.lid_backend.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数.
            <para>根据对应的XML节进行属性初始化</para>
            </summary>
            <param name="element">识别结果对应的XML节</param>
        </member>
        <member name="P:Speech.Engine.Lid.lid_backend.aveg_score">
            <summary>
            平均得分
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.lid_backend.aveg_score_lang">
            <summary>
            识别语种的平均得分
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.lid_backend.max_score">
            <summary>
            最大得分
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.lid_backend.max_score_lang">
            <summary>
            识别语种的最大得分
            </summary>
        </member>
        <member name="T:Speech.Engine.Lid.lid_segment">
            <summary>
            语音片段的识别结果信息
            </summary>
        </member>
        <member name="M:Speech.Engine.Lid.lid_segment.#ctor(System.Xml.Linq.XElement)">
            <summary>
            语种判定各个语音片段识别结果信息
            </summary>
            <param name="element">识别结果对应的XML节</param>
        </member>
        <member name="P:Speech.Engine.Lid.lid_segment.segment_id">
            <summary>
            测试片段编号
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.lid_segment.valid_frames">
            <summary>
            测试片段有效语音总帧数
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.lid_segment.gender">
            <summary>
            测试片段性别（男女生）
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.lid_segment.language">
            <summary>
            测试片段语种
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.lid_segment.begin_time">
            <summary>
            测试片段开始时间
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.lid_segment.end_time">
            <summary>
            测试片段结束时间
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.lid_segment.seg_info_list">
            <summary>
            每个片段可能的语种判定信息
            </summary>
        </member>
        <member name="T:Speech.Engine.Lid.lid_seg_info">
            <summary>
            段语种判定信息
            </summary>
        </member>
        <member name="M:Speech.Engine.Lid.lid_seg_info.#ctor(System.Xml.Linq.XElement)">
            <summary>
            默认构造函数
            </summary>
            <param name="element">识别结果XML节信息</param>
        </member>
        <member name="P:Speech.Engine.Lid.lid_seg_info.language">
            <summary>
            语种类型标识
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.lid_seg_info.tv_score">
            <summary>
            tv_score模型得分
            </summary>
        </member>
        <member name="T:Speech.Engine.Lid.LidEngineWorkerBase">
            <summary>
            引擎Worker基类
            <para>统一引擎数据写入</para>
            </summary>
        </member>
        <member name="M:Speech.Engine.Lid.LidEngineWorkerBase.DoAudioWrite(Speech.Engine.Vspp.Data.VsppDataAudio)">
            <summary>
            执行引擎计算数据写入
            <para>只执行单个数据写入,写入数据前,会清空引擎实例数据缓冲区</para>
            <para>默认写入的数据是语音音频数据</para>
            </summary> 
            <param name="audioData">语音数据</param>
        </member>
        <member name="M:Speech.Engine.Lid.LidEngineWorkerBase.DoBatchAudioWrite(Speech.Data.AudioFormat,System.Collections.Generic.IEnumerable{Speech.Engine.Vspp.Data.VsppData})">
            <summary>
            进行批量引擎数据写入
            </summary>
            <param name="audioFormat">语音格式</param>
            <param name="dataList">写入的引擎数据</param>
        </member>
        <member name="M:Speech.Engine.Lid.LidEngineWorkerBase.DoBatchDatasToEngine(System.Collections.Generic.List{Speech.Engine.Vspp.Core.WriteAudioData})">
            <summary>
            将各引擎所需的计算数据写入具体的引擎中
            <para>由各引擎自身的Worker来实现</para>
            </summary>
            <param name="datalist"></param>
        </member>
        <member name="M:Speech.Engine.Lid.LidEngineWorkerBase.DoPushDataToEngine(Speech.Engine.Vspp.Core.WriteAudioData)">
            <summary>
            将各引擎所需的计算数据写入具体的引擎中
            <para>由各引擎自身的Worker来实现</para>
            </summary>
            <param name="audioData">需要写入引擎的数据项</param>
        </member>
        <member name="P:Speech.Engine.Lid.LidEngineWorkerBase.DataType2AudioStateDict">
            <summary>
            数据类型到引擎写入数据结束状态的映射字典
            </summary>
        </member>
        <member name="T:Speech.Engine.Lid.LidApi">
            <summary>
            语种识别引擎(ifly language identify)
            </summary>
        </member>
        <member name="M:Speech.Engine.Lid.LidApi.LIDInitialize(System.String,System.String)">
            <summary>
            进程级全局初始化函数，初始化语种识别引擎以及数据访问相关
            <para>注：</para>
            <para>
            本函数必须在调用其他函数之前调用，一个进程仅能调用一次。<para></para>
            如果在多线程程序中使用这个函数，必须保证该函数在应用程序中仅调用一次。<para></para>
            初始化过程会初始化引擎以及开启与数据源的连接。
            </para>
            </summary>
            <param name="engine">传入需要初始化的引擎名称，可以为NULL，系统将自动查找需要初始化的引擎</param>
            <param name="reserved">保留，必须为NULL</param>
            <returns>
            LID_SUCCESS 成功
            <para>其他:</para>
            <para>LID_ERROR_LOAD_MODULE </para>
            </returns>
            <remarks>
            int LIDAPI LIDInitialize(const wchar_t* engine, void* reserved);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Lid.LidApi.LIDCreateInst(System.IntPtr@,System.String)">
            <summary>
            创建一个语种识别引擎实例
            </summary>
            <param name="svt">[传出]返回新创建语种识别实例句柄的地址</param>
            <param name="paramsstr">
            创建句柄时可以携带的参数值信息，格式为“param1=value1;param2=value2”，
            <para></para>在句柄创建后会使用这里指定的参数初始化句柄。<para></para>
            这些参数同样可以通过LIDSetParam来设置。
            </param>
            <returns>
            LID_SUCCESS on success
            <para>LID_ERROR_NO_LICENSE no free instance license</para>
            <para>LID_ERROR_INVALID_PARA_VALUE parameter value is invalid</para>
            </returns>
            <remarks>
            int LIDAPI LIDCreateInst(LID_INST* vst, const wchar_t* params);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Lid.LidApi.LIDGetParam(System.IntPtr,System.String,System.String@,System.Int32@)">
            <summary>
            获取当前语种识别引擎实例的参数值
            </summary>
            <param name="svt">由LIDCreateInst创建的引擎实例句柄</param>
            <param name="param_name">参数类型名称</param>
            <param name="param_value">参数取值</param>
            <param name="length">传出参数串的长度.以wchar_t长度为单位</param>
            <returns>
            LID_SUCCESS on success
            <para>LID_ERROR_INVALID_PARA invalid parameter</para>
            <para>LID_ERROR_NO_ENOUGH_BUFFER input buffer length is not enough</para>
            </returns>
            <remarks>
            int LIDAPI LIDGetParam(LID_INST vst, const wchar_t* param, wchar_t* value, unsigned int* len);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Lid.LidApi.LIDSetParam(System.IntPtr,System.String,System.String)">
            <summary>
            设置当前语种识别引擎实例的参数
            </summary>
            <param name="svt">由LIDCreateInst创建的引擎实例句柄</param>
            <param name="param_name">参数名称</param>
            <param name="param_value">参数值</param>
            <returns>
            LID_SUCCESS on success
            <para>LID_ERROR_INVALID_PARA invalid parameter</para>
            <para>LID_ERROR_INVALID_PARA_VALUE invalid parameter value</para>
            </returns>
            <remarks>int LIDAPI LIDSetParam(LID_INST vst, const wchar_t* param, const wchar_t* value);</remarks>
        </member>
        <member name="M:Speech.Engine.Lid.LidApi.LIDAudioWrite(System.IntPtr,System.String,System.Byte[],System.Int32,Speech.Engine.Vspp.Core.WriteAudioState@)">
            <summary>
            将语音数据写入引擎,准备进行相关计算
            </summary>
            <param name="svt">由LIDCreateInst创建的引擎实例句柄</param>
            <param name="audio_type">
            音频数据格式<para></para>
            “audio/basic”			        格式为 8k U-law
            “audio/basic; rate=16000”	    格式为 16k U-law
            “audio/x-alaw-basic”			    格式为 8k A-law
            “audio/x-alaw-basic;rate=16000”	格式为 16k A-law
            “audio/L16;rate=8000”		    格式为 8k16bit PCM
            “audio/L16;rate=16000”		    格式为 16k-16bit PCM
            </param>
            <param name="audio_data">音频数据</param>
            <param name="len_bytes">音频数据的长度，字节为单位</param>
            <param name="status">
            LID_AUDIO_BEGIN = 0,     传入参数,indicate data input begin */
            <para>LID_AUDIO_END = 1,       传入参数,the end of input data */                    </para>
            <para>LID_AUDIO_CONTINUE = 2,  传入参数,input data is continuing */                 </para>
            <para>LID_AUDIO_FULL = 3,      传出参数,data of special type is full */             </para>
            <para>LID_AUDIO_FILE_TAIL = 4, 传入参数,indicate the input data above is audio */   </para>
            </param>
            <returns>
            LID_SUCCESS on success
            </returns>
            <remarks>
            int LIDAPI LIDAudioWrite(LID_INST vst, const wchar_t* audio_type, const void* data, unsigned int len_bytes, LIDAudioStatus* status);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Lid.LidApi.LIDGetResult(System.IntPtr,System.IntPtr@,System.UInt32@,System.Int32,Speech.Engine.Lid.LidResultStatus@)">
            <summary>
            获取引擎就算处理的结果
            </summary>
            <param name="svt">由LIDCreateInst创建的引擎实例句柄</param>
            <param name="result">XML格式的字符串 指针地址</param>
            <param name="len_bytes">XML字符串的字节大小</param>
            <param name="timeout_ms">超时值,小于0,表示一直等待引擎计算完成;</param>
            <param name="status">
            LID_RESULT_NOT_BEGIN = 0,       传出参数,result computing is not begin */
            <para>LID_RESULT_COMPUTING = 1, 传出参数,result is computing */                      </para>
            <para>LID_RESULT_COMPLETE = 2,  传出参数,result is available */                       </para>
            <para>LID_RESULT_TIMEOUT = 3,   传出参数,wait for result is time out */                </para>
            <para>LID_RESULT_STOP = 4       传出参数,want to stop result computing, always input */   </para>
            </param>
            <returns>
            LID_SUCCESS on success
            <para>LID_ERROR_NOT_AUDIO_END audio is not ready</para>
            </returns>
            <remarks>int LIDAPI LIDGetResult(LID_INST vst, const char** result, unsigned int* len_bytes, int timeout_ms, LIDResultStatus* status);</remarks>
        </member>
        <member name="M:Speech.Engine.Lid.LidApi.LIDGetSdcIvector(System.IntPtr,System.IntPtr@,System.UInt32@,System.IntPtr@,System.UInt32@,System.Int32,Speech.Engine.Lid.LidResultStatus@)">
            <summary>
            LIDGetSdcIvector
            </summary>
            <param name="svt"></param>
            <param name="sdc_fea"></param>
            <param name="sdc_len"></param>
            <param name="ivector_fea"></param>
            <param name="ivector_len"></param>
            <param name="timeout_ms"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Lid.LidApi.LIDDestroyInst(System.IntPtr)">
            <summary>
            销毁语种识别实例,该实例由 LIDCreateInst生成的;
            </summary>
            <param name="svt">由LIDCreateInst创建的实例句柄；</param>
            <returns>LID_SUCCESS 成功</returns>
            <remarks>int LIDAPI LIDDestroyInst(LID_INST vst);</remarks>
        </member>
        <member name="M:Speech.Engine.Lid.LidApi.LIDUninitialize">
            <summary>
            逆初始化并关闭语种识别引擎，释放与数据源的连接，释放全局资源。
            </summary>
            <remarks>
            int LIDAPI LIDUninitialize();
            </remarks>
            <returns>
            LID_SUCCESS on success
            <para>LID_ERROR_NOT_INIT LIDInitialize is not correctly called</para>
            </returns>
        </member>
        <member name="T:Speech.Engine.Lid.LidEnumStatus">
            <summary>
            状态枚举值
            </summary>
        </member>
        <member name="T:Speech.Engine.Lid.LidAudioStatus">
            <summary>
            语音写入状态枚举值
            </summary>
        </member>
        <member name="F:Speech.Engine.Lid.LidAudioStatus.LID_AUDIO_BEGIN">
            <summary>
            表示清除引擎语音缓冲区，并开始传入当前语音数据
            </summary>
        </member>
        <member name="F:Speech.Engine.Lid.LidAudioStatus.LID_AUDIO_END">
            <summary>
            表示所有传入数据结束
            </summary>
        </member>
        <member name="F:Speech.Engine.Lid.LidAudioStatus.LID_AUDIO_CONTINUE">
            <summary>
            表示后继还有语音数据需要传入
            </summary>
        </member>
        <member name="F:Speech.Engine.Lid.LidAudioStatus.LID_AUDIO_FULL">
            <summary>
            传出参数。指示当前语音缓冲区已满
            </summary>
        </member>
        <member name="F:Speech.Engine.Lid.LidAudioStatus.LID_AUDIO_FILE_TAIL">
            <summary>
            表示传入的一个语音文件结束
            </summary>
        </member>
        <member name="F:Speech.Engine.Lid.LidAudioStatus.LID_AUDIO_SPP_TAIL">
            <summary>
            表示之前传入的数据为语音片段标记信息
            </summary>
        </member>
        <member name="T:Speech.Engine.Lid.LidResultStatus">
            <summary>
            识别结果状态值枚举
            </summary>
        </member>
        <member name="F:Speech.Engine.Lid.LidResultStatus.LID_RESULT_NOT_BEGIN">
            <summary>
            表示当前尚未开始计算
            </summary>
        </member>
        <member name="F:Speech.Engine.Lid.LidResultStatus.LID_RESULT_COMPUTING">
            <summary>
            表示还在计算处理过程中，还有数据需要计算
            </summary>
        </member>
        <member name="F:Speech.Engine.Lid.LidResultStatus.LID_RESULT_COMPLETE">
            <summary>
            表示计算完成
            </summary>
        </member>
        <member name="F:Speech.Engine.Lid.LidResultStatus.LID_RESULT_TIMEOUT">
            <summary>
            超时标识
            </summary>
        </member>
        <member name="F:Speech.Engine.Lid.LidResultStatus.LID_RESULT_STOP">
            <summary>
            当作为传入参数时，通知引擎停止计算结果，用户不再继续获取结果。作为传出参数时，引擎通知用户当前结果是最后一个结果
            </summary>
        </member>
        <member name="T:Speech.Engine.Lid.LidTagVo">
            <summary>
            语种识别结果Tag
            </summary>
        </member>
        <member name="M:Speech.Engine.Lid.LidTagVo.#ctor(System.String)">
            <summary>
            带参构造函数
            </summary>
            <param name="xml">对象对应的XML字符串</param>
        </member>
        <member name="M:Speech.Engine.Lid.LidTagVo.ToString">
            <summary>
            重写ToString方法
            </summary>
            <returns>返回对象对应的XML文件</returns>
        </member>
        <member name="P:Speech.Engine.Lid.LidTagVo.IsValidLid">
            <summary>
            是否有效的Lid处理结果 
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTagVo.result_xml">
            <summary>
            原始XML字符串
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTagVo.returncode">
            <summary>
            返回代码
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTagVo.segment_count">
            <summary>
            测试片段个数
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTagVo.lang_count">
            <summary>
            能识别语种lan_count总数
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTagVo.valid_frames">
            <summary>
            总的有效帧数
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTagVo.language">
            <summary>
            总的识别语种
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTagVo.ratio">
            <summary>
            当前识别语种的比率
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTagVo.gender">
            <summary>
            整句的性别
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTagVo.threshold">
            <summary>
            识别语确认判决的阈值-
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTagVo.ratio_languge">
            <summary>
            识别语种的比率确认的语种English 通过对语种比例设置阈值做判决
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTagVo.mmi">
            <summary>
            模型得分
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTagVo.backend">
            <summary>
            backend信息
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTagVo.segment_list">
            <summary>
            各个语音段的信息
            <para>包含:片段编号,片段男女,语种,片段开始时间,片段结束时间</para>
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidTagVo.ObjectiveTimelen">
            <summary>
            判定语种的有效时长 = 语音有效时长*当前识别语种的比率(ratio)
            <para>所有语种的有效时长之和应该等于整句有效时长</para>
            <para>单位为:毫秒</para>
            </summary> 
        </member>
        <member name="T:Speech.Engine.Lid.mmi_backend">
            <summary>
            模型/后端处理模型的得分信息
            </summary>
        </member>
        <member name="M:Speech.Engine.Lid.mmi_backend.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数.
            <para>根据对应的XML节进行属性初始化</para>
            </summary>
            <param name="element">识别结果对应的XML节</param>
        </member>
        <member name="P:Speech.Engine.Lid.mmi_backend.aveg_score">
            <summary>
            平均得分
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.mmi_backend.aveg_score_lang">
            <summary>
            识别语种的平均得分
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.mmi_backend.max_score">
            <summary>
            最大得分
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.mmi_backend.max_score_lang">
            <summary>
            识别语种的最大得分
            </summary>
        </member>
        <member name="T:Speech.Engine.Lid.segment">
            <summary>
            语音片段的识别结果信息
            </summary>
        </member>
        <member name="M:Speech.Engine.Lid.segment.#ctor(System.Xml.Linq.XElement)">
            <summary>
            语种判定各个语音片段识别结果信息
            </summary>
            <param name="element">识别结果对应的XML节</param>
        </member>
        <member name="P:Speech.Engine.Lid.segment.segment_id">
            <summary>
            测试片段编号
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.segment.valid_frames">
            <summary>
            测试片段有效语音总帧数
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.segment.gender">
            <summary>
            测试片段性别（男女生）
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.segment.language">
            <summary>
            测试片段语种
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.segment.begin_time">
            <summary>
            测试片段开始时间
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.segment.end_time">
            <summary>
            测试片段结束时间
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.segment.seg_info_list">
            <summary>
            每个片段可能的语种判定信息
            </summary>
        </member>
        <member name="T:Speech.Engine.Lid.seg_info">
            <summary>
            段语种判定信息
            </summary>
        </member>
        <member name="M:Speech.Engine.Lid.seg_info.#ctor(System.Xml.Linq.XElement)">
            <summary>
            默认构造函数
            </summary>
            <param name="element">识别结果XML节信息</param>
        </member>
        <member name="P:Speech.Engine.Lid.seg_info.language">
            <summary>
            语种类型标识
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.seg_info.mmi_score">
            <summary>
            mmi模型得分
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.seg_info.backend_score">
            <summary>
            后端处理模型得分
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.seg_info.ratio">
            <summary>
            viterbi计算的比率
            </summary>
        </member>
        <member name="T:Speech.Engine.Lid.LidConfig">
            <summary>
            语种基础配置
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidConfig.AudioDataMaxSize">
            <summary>
            8K16bit格式语音,30秒语音数据大小: 480000字节;
            </summary>
        </member>
        <member name="T:Speech.Engine.Lid.LidWorker">
            <summary>
            底层引擎应用系统外壳工作者
            </summary>
        </member>
        <member name="F:Speech.Engine.Lid.LidWorker._vst">
            <summary>
            引擎实例
            </summary>
        </member>
        <member name="F:Speech.Engine.Lid.LidWorker._iRet">
            <summary>
            引擎操作返回值
            </summary>
        </member>
        <member name="M:Speech.Engine.Lid.LidWorker.#ctor">
            <summary>
            默认构造函数.
            <para>创建当前工作者需要的引擎实例</para>
            </summary>
        </member>
        <member name="M:Speech.Engine.Lid.LidWorker.IdentifyLanguage(Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.VsppDataTag)">
            <summary>
            进行语种识别
            </summary> 
            <param name="audioData">语音数据</param>
            <param name="tagData">语音tagData</param>
            <returns>语种识别XML结果</returns>
        </member>
        <member name="M:Speech.Engine.Lid.LidWorker.DoGetResult">
            <summary>
            获取识别结果
            </summary>
            <returns>识别结果XML</returns>
        </member>
        <member name="M:Speech.Engine.Lid.LidWorker.GetSdcIvector(Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.VsppDataTag)">
            <summary>
            获取SdcIvector
            </summary>
            <returns>识别结果XML</returns>
        </member>
        <member name="M:Speech.Engine.Lid.LidWorker.DoPushDataToEngine(Speech.Engine.Vspp.Core.WriteAudioData)">
            <summary>
            语种引擎所需的计算数据写入
            </summary>
            <param name="writerItem">需要写入引擎的数据项</param>
        </member>
        <member name="M:Speech.Engine.Lid.LidWorker.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:Speech.Engine.Lid.LidWorker.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="M:Speech.Engine.Lid.LidWorker.QLidAction(Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.VsppDataTag)">
            <summary>
            进行语种判定处理
            </summary>
            <param name="audioData"></param>
            <param name="tagData">可以为空，如果为null，将启用内置VSPP</param>
            <returns>判定输出结果</returns>
        </member>
        <member name="M:Speech.Engine.Lid.LidWorker.QGetSdcIvector(Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.VsppDataTag)">
            <summary>
            获取 SdcIvector
            </summary>
            <param name="audioData"></param>
            <param name="tagData"></param>
            <returns></returns>
        </member>
        <member name="T:Speech.Engine.Lid.LidEngine">
             <summary>
             该类是引擎环境控制类，主要用于对引擎的加载初始化与逆初始化。
            初始化与逆初始化在应用中只能做一次，所以该类的使用应放在应用程序的启动与退出场景中。
             </summary>
        </member>
        <member name="F:Speech.Engine.Lid.LidEngine._hasInitialize">
            <summary>
            用于标识引擎是否已被初始化。对引擎初始化与逆初始化时，需要对该域值做同步，防止被初始化多次。
            </summary>
        </member>
        <member name="F:Speech.Engine.Lid.LidEngine._strEnginePath">
            <summary>
            当前引擎接口所安装在磁盘中的位置
            </summary>
        </member>
        <member name="F:Speech.Engine.Lid.LidEngine._synRoot">
            <summary>
            内部操作同步对象
            </summary>
        </member>
        <member name="M:Speech.Engine.Lid.LidEngine.Initialize(System.String)">
            <summary>
            对引擎进行初始化
            </summary>
            <param name="path">引擎路径[暂时未启用]</param>
        </member>
        <member name="M:Speech.Engine.Lid.LidEngine.Uninitialize">
            <summary>
            逆初始化引擎
            </summary>
        </member>
        <member name="P:Speech.Engine.Lid.LidEngine.HasInitialize">
            <summary>
            引擎是否已被初始化
            </summary>
        </member>
        <member name="T:Speech.Engine.NextG.ConfigSetting">
            <summary>
            NextG相关配置：
            <para>特征维数</para>
            <para>声学模型资源地址</para>
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.ConfigSetting.#ctor(System.String)">
            <summary>
            NextG相关配置
            </summary>
            <param name="configFileName"></param>
        </member>
        <member name="M:Speech.Engine.NextG.ConfigSetting.CheckRes">
            <summary>
            ResURI  是否存在
            </summary>
        </member>
        <member name="P:Speech.Engine.NextG.ConfigSetting.LMResURI">
            <summary>
            是高阶语言模型，二遍解码用的。
            </summary>
        </member>
        <member name="P:Speech.Engine.NextG.ConfigSetting.WFSTResURI">
            <summary>
            解码用的一遍语言模型(wfst网络)；
            </summary>
        </member>
        <member name="P:Speech.Engine.NextG.ConfigSetting.AcmodResURI">
            <summary>
            声学资源
            <para>提供的资源都是8K的，HMM_16K代表模型的数据采样率；</para>
            </summary>
        </member>
        <member name="P:Speech.Engine.NextG.ConfigSetting.HwbResDir">
            <summary>
            热词资源目录 *.hwb
            </summary>
        </member>
        <member name="P:Speech.Engine.NextG.ConfigSetting.PLP_BLOCK_SIZE_OF_FRAME">
            <summary>
            一帧 特征块大小
            </summary>
        </member>
        <member name="T:Speech.Engine.NextG.NextGProxy">
            <summary>
            NextG解码器
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.NextGProxy.#ctor(Speech.Data.RecWorkMode,System.Int32)">
            <summary>
            NextG解码器
            </summary>
            <param name="workMode">识别模式</param>
            <param name="paralleCount"></param>
        </member>
        <member name="M:Speech.Engine.NextG.NextGProxy.AsyncDecode(System.String,Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.WorkMode)">
            <summary>
            异步解码
            <para>解码结果通过AsyncDecodeCompleted 事件返回</para>
            </summary>
            <param name="audioId"></param>
            <param name="audioData"></param>
            <param name="vsppWorkMode"></param>
        </member>
        <member name="M:Speech.Engine.NextG.NextGProxy.AsyncDecode(System.String,System.Collections.Generic.List{Speech.Data.DecodeSegItem})">
            <summary>
            异步解码
            <para>解码结果通过AsyncDecodeCompleted 事件返回</para>
            </summary>
            <param name="audioId"></param>
            <param name="segList"></param>
        </member>
        <member name="M:Speech.Engine.NextG.NextGProxy.WaitAll">
            <summary>
            等待解码完成
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.NextGProxy.Decode(System.String,Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.WorkMode)">
            <summary>
            同步解码
            </summary>
            <param name="audioId"></param>
            <param name="audioData"></param>
            <param name="vsppWorkMode"></param>
            <returns></returns>
        </member>
        <member name="E:Speech.Engine.NextG.NextGProxy.AsyncDecodeCompleted">
            <summary>
            解码完成事件
            </summary>
        </member>
        <member name="T:Speech.Engine.NextG.Core.RecData">
            <summary>
            识别数据
            </summary>
        </member>
        <member name="P:Speech.Engine.NextG.Core.RecData.AudioId">
            <summary>
            音频Id
            </summary>
        </member>
        <member name="P:Speech.Engine.NextG.Core.RecData.SegList">
            <summary>
            待解码的SegList
            </summary>
        </member>
        <member name="P:Speech.Engine.NextG.Core.RecData.AudioSize">
            <summary>
            音频
            </summary>
        </member>
        <member name="T:Speech.Engine.NextG.Core.RecResult">
            <summary>
            识别结果
            </summary>
        </member>
        <member name="P:Speech.Engine.NextG.Core.RecResult.LatticeList">
            <summary>
            LatticeList
            </summary>
        </member>
        <member name="P:Speech.Engine.NextG.Core.RecResult.IsRecCompleted">
            <summary>
            解码是否全部完成
            </summary>
        </member>
        <member name="T:Speech.Engine.NextG.Core.RecCompletedEventargs">
            <summary>
            解码完成事件参数
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Core.RecCompletedEventargs.#ctor(Speech.Data.LatticeItem)">
            <summary>
            解码完成事件参数
            </summary> 
            <param name="result">识别结果</param>
        </member>
        <member name="P:Speech.Engine.NextG.Core.RecCompletedEventargs.Result">
            <summary> 
            Result
            </summary>
        </member>
        <member name="P:Speech.Engine.NextG.Core.RecCompletedEventargs.NextSeg">
            <summary>
            下一个待识别的Seg
            </summary>
        </member>
        <member name="T:Speech.Engine.NextG.Core.DecodeCompletedEventargs">
            <summary>
            解码完成事件参数
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Core.DecodeCompletedEventargs.#ctor(System.String,System.Collections.Generic.List{Speech.Data.LatticeItem})">
            <summary>
            解码完成事件参数
            </summary>
            <param name="audioId"></param>
            <param name="resultList"></param>
        </member>
        <member name="M:Speech.Engine.NextG.Core.DecodeCompletedEventargs.#ctor(System.String,System.Exception)">
            <summary>
            解码完成事件参数
            </summary>
            <param name="audioId"></param>
            <param name="error"></param>
        </member>
        <member name="P:Speech.Engine.NextG.Core.DecodeCompletedEventargs.Error">
            <summary>
            解码过程中异常
            </summary>
        </member>
        <member name="P:Speech.Engine.NextG.Core.DecodeCompletedEventargs.IsSuccess">
            <summary>
            解码是否成功
            </summary>
        </member>
        <member name="P:Speech.Engine.NextG.Core.DecodeCompletedEventargs.AudioId">
            <summary>
            关联的语音Id
            </summary>
        </member>
        <member name="P:Speech.Engine.NextG.Core.DecodeCompletedEventargs.ResultList">
            <summary> 
            LatticeList
            </summary>
        </member>
        <member name="T:Speech.Engine.NextG.Core.DecodeProxy">
            <summary>
            解码调度器
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Core.DecodeProxy.#ctor(Speech.Data.RecWorkMode,System.Int32)">
            <summary>
            解码调度器
            </summary>
            <param name="workMode"></param>
            <param name="paralleCount">默认为CPU核数的92%</param>
        </member>
        <member name="M:Speech.Engine.NextG.Core.DecodeProxy.Push(Speech.Engine.NextG.Core.RecData)">
            <summary>
            添加 解码数据
            </summary>
            <param name="recData"></param>  
        </member>
        <member name="M:Speech.Engine.NextG.Core.DecodeProxy.WaitAll">
            <summary>
            等待解码完成
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Core.DecodeProxy.proxy_RecCompleted(System.Object,Speech.Engine.NextG.Core.RecCompletedEventargs)">
            <summary>
            RecSeg 完成响应事件，获取下一个将要识别的 Seg
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Speech.Engine.NextG.Core.DecodeProxy.DealRecResult(Speech.Data.LatticeItem)">
            <summary>
            处理识别结果，判断 关联某audioId的seg是否全部完成识别，如果完成就通知上层调用（返回解码结果）
            </summary>
            <param name="latticeItemResult"></param>
        </member>
        <member name="E:Speech.Engine.NextG.Core.DecodeProxy.DecodeCompleted">
            <summary>
            解码完成事件
            </summary>
        </member>
        <member name="T:Speech.Engine.NextG.Core.RecProxy">
            <summary>
            识别工作者
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Core.RecProxy.DoWork(Speech.Data.RecWorkMode)">
            <summary>
            死循环，不停的获取Seg解码，如果没有将休息100ms
            </summary>
            <param name="workMode"></param>
        </member>
        <member name="M:Speech.Engine.NextG.Core.RecProxy.RecSeg(Speech.Data.DecodeSegItem,Speech.Data.RecWorkMode)">
            <summary>
            RecSeg
            </summary>
            <param name="workMode"></param>
        </member>
        <member name="E:Speech.Engine.NextG.Core.RecProxy.RecCompleted">
            <summary>
            识别完成事件
            </summary>
        </member>
        <member name="T:Speech.Engine.NextG.Core.DecodeWorker">
            <summary>
            解码工作者
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Core.DecodeWorker.Decode(Speech.Data.RecWorkMode)">
            <summary>
            
            </summary>
            <param name="workMode"></param>
        </member>
        <member name="T:Speech.Engine.NextG.Core.DecodedHandler">
            <summary>
            解码结束 代理
            </summary>
            <param name="latticeItemResult">本次解码结果</param>
            <returns>下一解码片段</returns>
        </member>
        <member name="T:Speech.Engine.NextG.Core.DecodeDispatcher">
            <summary>
            解码调度器
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Core.DecodeDispatcher.Decode(System.Collections.Generic.List{Speech.Data.DecodeSegItem},Speech.Data.RecWorkMode,System.Int32)">
            <summary>
            多线程解码
            </summary>
            <param name="segList"></param>
            <param name="workMode"></param>
            <param name="paralleCount"> 并行数</param>
            <returns></returns>
        </member>
        <member name="T:Speech.Engine.NextG.Core.RecWorker">
             <summary>
             NextG识别工作者基类(相当于一个线程)
             </summary>
             <remarks>
            +--------------------------------------------------------------------------------+
            + 调用引擎顺序
            +  wRecognizerStart
            wFeatureWrite1Pass（featureType =0）
            wGetResult（获取1bast）
            wFeatureWrite1Pass（featureType =1）
            wGetResult（获取1bast）
            wGetSecondPassLattice（获取Cn网络）
            wRecognizerStop
            +--------------------------------------------------------------------------------+ 
             </remarks>
        </member>
        <member name="F:Speech.Engine.NextG.Core.RecWorker.PLP_BLOCK_SIZE_OF_FRAME">
            <summary>
            一帧的PLP特征值 块的长度
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Core.RecWorker.#ctor">
            <summary>
            NextG识别
            </summary> 
        </member>
        <member name="M:Speech.Engine.NextG.Core.RecWorker.CreateInst">
            <summary>
            创建实例
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Core.RecWorker.SetParameter">
            <summary>
            设置参数
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Core.RecWorker.RecBegin(System.Byte[],System.Int32)">
            <summary>
            识别
            </summary>
            <param name="plpBuffer"></param>
            <param name="nFrameNum"></param>
        </member>
        <member name="F:Speech.Engine.NextG.Core.RecWorker._isRec2Pass">
            <summary>
            是否二遍解码
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Core.RecWorker.GetOneBestText(System.Boolean)">
            <summary>
             获取OneBest文本
            </summary>
            <param name="isRecPass2">是否二遍解码[默认二遍解码]</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.NextG.Core.RecWorker.GetCnText">
            <summary>
            获取CN网络内容
            <para>注意：必须先调用 GetOneBastText </para>
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.NextG.Core.RecWorker.RecEnd">
            <summary>
            识别结束
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Core.RecWorker.Dispose">
            <summary>
            释放实例
            </summary>
        </member>
        <member name="T:Speech.Engine.NextG.Exceptions.FeaErrors">
             <summary>
            The enumeration WFea_ERROR enumerates possible EngineError codes 
             </summary>
        </member>
        <member name="F:Speech.Engine.NextG.Exceptions.FeaErrors.Engine_SUCCESS">
            <summary>
            function completed successfully
            </summary>
        </member>
        <member name="T:Speech.Engine.NextG.Exceptions.FeaException">
            <summary>
            Fea 引擎异常
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Exceptions.FeaException.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.NextG.Exceptions.FeaException"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.NextG.Exceptions.FeaException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.NextG.Exceptions.FeaException"/> class with
            the specified message.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.NextG.Exceptions.FeaException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            <para>默认不可重试、恢复</para>
            </summary>
            <param name="message">A message to include with the exception.</param>
            <param name="innerException">A nested exception to include.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.NextG.Exceptions.FeaException"/> class
            with the specified message and inner exception.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.NextG.Exceptions.FeaException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="isReparable">是否可以重试、恢复</param>
        </member>
        <member name="M:Speech.Engine.NextG.Exceptions.FeaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            为序列化提供的构造函数
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Speech.Engine.NextG.Core.FeaWorker">
            <summary>
            PLP特征工作者基类(相当于一个线程)
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Core.FeaWorker.#ctor">
            <summary>
             PLP特征工作者基类(相当于一个线程)
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Core.FeaWorker.GetFeature(System.Byte[],System.String)">
            <summary>
            获取特征
            </summary>
            <param name="wavBuffer">8k16bitpcm 的语音</param>
            <param name="tagXml"></param>
            <returns></returns>
        </member>
        <member name="T:Speech.Engine.NextG.Core.NextGFeaApi">
            <summary>
            定制 NextG 特征提取引擎
            <para>平嵌内核声纹语种组提供(徐伟)</para>
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Core.NextGFeaApi.GetFeatureCreate(System.IntPtr@)">
            <summary>
            创建实例
            </summary>
            <param name="phInst"></param>
            <returns></returns>
            <remarks>
            int __stdcall GetFeatureCreate(void ** phInst);
            </remarks>
        </member>
        <member name="M:Speech.Engine.NextG.Core.NextGFeaApi.GetFeatureDestroy(System.IntPtr)">
            <summary>
            销毁实例
            </summary>
            <param name="vst"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.NextG.Core.NextGFeaApi.GetFeatureProc(System.IntPtr,System.Byte[],System.Int32,System.String,System.Int32,System.IntPtr@,System.Int32@)">
            <summary>
            获取fea
            </summary>
            <param name="vst"></param>
            <param name="audio_data"></param>
            <param name="audio_len_bytes"></param>
            <param name="xml_tag"></param>
            <param name="xml_len"></param>
            <param name="fea_pointer"></param>
            <param name="ftr_len_bytes"></param>
            <returns></returns>
            <remarks>
            int __stdcall GetFeatureProc(void * hInst, 
            const void * data, 
            unsigned int data_len_bytes, 
            const char * xml_tag, 
            unsigned int xml_len, 
            void ** feature_data, unsigned int * ftr_len_bytes);
            </remarks>
        </member>
        <member name="F:Speech.Engine.NextG.Core.tagAudioSamples.samples">
             Audio sample data.  An audio sample of zero length can be used to
             indicate last buffer status without including any additional audio
             samples.
            
             @param samples Sample buffer
             @param len Length of sample buffer, in bytes
             @param type MEDIA type of samples
               "audio/basic" 8-bit 8 KHz u-law encoding [unsigned char *]
               "audio/x-alaw-basic" 8-bit 8 KHz A-law encoding [unsigned char *]
               "audio/L16;rate=8000" 16-bit 8 KHz linear encoding [short *]
            	"feature/L16"
            	"feature/L8"
            	"feature/L6"
            	"feature/L4"
             @param status Sample status: first buffer, last buffer
        </member>
        <member name="F:Speech.Engine.NextG.Core.tagFeatureData.featureStatus">
            <summary>
            0:begin 1:contione 2:end
            </summary>
        </member>
        <member name="F:Speech.Engine.NextG.Core.tagFeatureData.featureType">
            <summary>
            0: 第一遍解码 1:第二遍解码
            </summary>
        </member>
        <member name="T:Speech.Engine.NextG.Core.LATTICE_FORMAT">
            <summary>
            返回结果类型
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Core.NextGRecApi.wResourceAdd(System.Int32,System.String,System.String)">
            <summary>
            添加资源
            </summary>
            <param name="resID">资源编号</param>
            <param name="szResURI">资源URI路径</param>
            <param name="szResCategoryID">资源类型</param>
            <returns>添加资源的处理结果</returns>
        </member>
        <member name="M:Speech.Engine.NextG.Core.NextGRecApi.wGetResult(Speech.Engine.NextG.Core.WREC_INST_,Speech.Engine.NextG.Core.tagResult@,System.Int32@)">
            <summary>
            获取结果(1bast)
            </summary>
            <param name="wRecInst">引擎解码实例句柄</param>
            <param name="szResult"></param>
            <param name="resultStatus"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.NextG.Core.NextGRecApi.wFeatureWrite(Speech.Engine.NextG.Core.WREC_INST_,Speech.Engine.NextG.Core.tagFeatureData@)">
            <summary>
            
            </summary>
            <param name="wDecInst"></param>
            <param name="ftrData"></param>
            <returns></returns>
            <remarks>
               int WRECAPI wFeatureWrite(WREC_INST wDecInst, const WREC_FEATURE_DATA* ftrData);
            </remarks>
        </member>
        <member name="M:Speech.Engine.NextG.Core.NextGRecApi.wFeatureWrite1Pass(Speech.Engine.NextG.Core.WREC_INST_,Speech.Engine.NextG.Core.tagFeatureData@)">
            <summary>
            一遍解码
            </summary>
            <param name="wDecInst"></param>
            <param name="ftrData"></param>
            <returns></returns>
            <remarks>
            int WRECAPI wFeatureWrite1Pass(WREC_INST wDecInst,const WREC_FEATURE_DATA* ftrData);
            </remarks>
        </member>
        <member name="M:Speech.Engine.NextG.Core.NextGRecApi.wGetSecondPassLattice(Speech.Engine.NextG.Core.WREC_INST_,Speech.Engine.NextG.Core.tagResult@,System.Int32@,System.Int32@,Speech.Engine.NextG.Core.LATTICE_FORMAT,System.Single)">
            <summary>
            获取CN网络
            </summary>
            <param name="wDecInst">引擎解码实例句柄</param>
            <param name="szLattice">输出的CN网络</param>
            <param name="nArcs">是输出网络中弧个数</param>
            <param name="nStates">是输出网络中节点个数</param>
            <param name="eLatticeType"></param>
            <param name="inverserange">0.002固定值 这是平嵌给研究院的一个经验值</param>
            <returns></returns>
            <remarks>
            int WRECAPI wGetSecondPassLattice(WREC_INST wDecInst, wPStrA* szLattice,int* nArcs, int* nStates, LATTICE_FORMAT eLatticeType, float inverserange);
            </remarks>
        </member>
        <member name="F:Speech.Engine.NextG.Core.tagWVADAudioSamples.samples">
             Audio sample data.  An audio sample of zero length can be used to
             indicate last buffer status without including any additional audio
             samples.
            
             @param samples Sample buffer
             @param len Length of sample buffer, in bytes
             @param type MEDIA type of samples
               "audio/basic" 8-bit 8 KHz u-law encoding [unsigned char *]
               "audio/x-alaw-basic" 8-bit 8 KHz A-law encoding [unsigned char *]
               "audio/L16;rate=8000" 16-bit 8 KHz linear encoding [short *]
            	"feature/L16" 16bit feature
            	"feature/L8" 8bit feature
            	"feature/L4" 4bit feature
             @param status Sample status: first buffer, last buffer
        </member>
        <member name="T:Speech.Engine.NextG.Exceptions.RecErrors">
             <summary>
            The enumeration WREC_ERROR enumerates possible EngineError codes 
             </summary>
        </member>
        <member name="F:Speech.Engine.NextG.Exceptions.RecErrors.Engine_SUCCESS">
            <summary>
            function completed successfully
            </summary>
        </member>
        <member name="T:Speech.Engine.NextG.Exceptions.RecException">
            <summary>
            Rec 引擎异常
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Exceptions.RecException.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.NextG.Exceptions.RecException"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.NextG.Exceptions.RecException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.NextG.Exceptions.RecException"/> class with
            the specified message.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.NextG.Exceptions.RecException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            <para>默认不可重试、恢复</para>
            </summary>
            <param name="message">A message to include with the exception.</param>
            <param name="innerException">A nested exception to include.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.NextG.Exceptions.RecException"/> class
            with the specified message and inner exception.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.NextG.Exceptions.RecException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="isReparable">是否可以重试、恢复</param>
        </member>
        <member name="M:Speech.Engine.NextG.Exceptions.RecException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            为序列化提供的构造函数
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Speech.Engine.NextG.Exceptions.VadErrors">
             <summary>
            The enumeration WVAD_ERROR enumerates possible EngineError codes 
             </summary>
        </member>
        <member name="F:Speech.Engine.NextG.Exceptions.VadErrors.Engine_SUCCESS">
            <summary>
            function completed successfully
            </summary>
        </member>
        <member name="T:Speech.Engine.NextG.Exceptions.VadException">
            <summary>
            Vad 引擎异常
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.Exceptions.VadException.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.NextG.Exceptions.VadException"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.NextG.Exceptions.VadException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.NextG.Exceptions.VadException"/> class with
            the specified message.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.NextG.Exceptions.VadException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            <para>默认不可重试、恢复</para>
            </summary>
            <param name="message">A message to include with the exception.</param>
            <param name="innerException">A nested exception to include.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.NextG.Exceptions.VadException"/> class
            with the specified message and inner exception.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.NextG.Exceptions.VadException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="isReparable">是否可以重试、恢复</param>
        </member>
        <member name="M:Speech.Engine.NextG.Exceptions.VadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            为序列化提供的构造函数
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Speech.Engine.NextG.NextGDecoder">
            <summary>
            NextG解码器
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.NextGDecoder.Decode(System.Collections.Generic.List{Speech.Data.DecodeSegItem},Speech.Data.RecWorkMode,System.Int32)">
            <summary>
            识别解码
            <para>注意：单路,阻塞式，内部是多线程处理</para>
            </summary>
            <param name="segList"></param>
            <param name="workMode"></param>
            <param name="paralleCount"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.NextG.NextGDecoder.Decode(System.String,Speech.Data.RecWorkMode,Speech.Engine.Vspp.Data.VsppDataAudio)">
            <summary>
            NextG解码 
            </summary>
            <param name="audioData">语音</param>
            <param name="bizId">业务Id</param>
            <param name="workMode"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.NextG.NextGDecoder.Decode(System.String,Speech.Data.RecWorkMode,Speech.Engine.Vspp.Data.VsppDataAudio,System.String)">
            <summary>
            NextG解码
            <para>[根据指定语音边界分离进行解码]</para>
            </summary>
            <param name="audioData">语音</param>
            <param name="workMode">工作模式</param>
            <param name="tagXml">指定语音边界</param>
            <param name="bizId">业务Id</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.NextG.NextGDecoder.Decode(System.String,Speech.Data.RecWorkMode,Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.WorkMode)">
            <summary>
            NextG解码
            <para>[根据说话人分离进行解码]</para>
            </summary>
            <param name="audioData">语音</param>
            <param name="vsppWorkMode">分离还是降噪</param>
            <param name="bizId">业务Id</param>
             <param name="workMode"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.NextG.NextGDecoder.GetPlpSegList(System.String,Speech.Engine.Vspp.Data.VsppDataAudio,System.String)">
            <summary>
            
            </summary>
            <param name="audioData"></param>
            <param name="tagXml"></param>
            <param name="bizId"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.NextG.NextGDecoder.GetPlpSegList(System.String,Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.WorkMode)">
            <summary>
            获取Plp特征段 列表
            </summary>
            <param name="audioData">音频数据</param>
            <param name="speakerNum">音频中的说话人个数</param>
            <param name="bizId">业务Id</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.NextG.NextGDecoder.GetPlpFeature(System.Byte[],System.String)">
            <summary>
            获取PLP特征数据(无头)
            </summary>
            <param name="_8k16bitPcmBuffer"></param>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.NextG.NextGDecoder.GetPlpSegList(System.String,System.Byte[],Speech.Engine.Vspp.Data.VadTag)">
            <summary>
            获取Plp特征段 列表
            </summary>
            <param name="_8k16bitPcmBuffer">A8k_16bit_PCM 格式的原始语音数据</param>
            <param name="vsppTag"></param>
            <param name="bizId"></param>
            <returns></returns>
        </member>
        <member name="T:Speech.Engine.NextG.RecEngine">
             <summary>
             该类是引擎环境控制类，主要用于对引擎的加载初始化与逆初始化。
            初始化与逆初始化在应用中只能做一次，所以该类的使用应放在应用程序的启动与退出场景中。
             </summary>
        </member>
        <member name="F:Speech.Engine.NextG.RecEngine._hasInitialize">
            <summary>
            用于标识引擎是否已被初始化。对引擎初始化与逆初始化时，需要对该域值做同步，防止被初始化多次。
            </summary>
        </member>
        <member name="F:Speech.Engine.NextG.RecEngine._strEnginePath">
            <summary>
            当前引擎接口所安装在磁盘中的位置
            </summary>
        </member>
        <member name="F:Speech.Engine.NextG.RecEngine._strEngineResPath">
            <summary>
            当前引擎资源所在的路径.
            <para>资源文件路径相对引擎路径+ res目录</para>
            </summary>
        </member>
        <member name="F:Speech.Engine.NextG.RecEngine._synRoot">
            <summary>
            内部操作同步对象
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.RecEngine.Initialize(System.String)">
            <summary>
            对引擎进行初始化
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.RecEngine.Uninitialize">
            <summary>
            逆初始化引擎
            </summary>
        </member>
        <member name="P:Speech.Engine.NextG.RecEngine.HasInitialize">
            <summary>
            引擎是否已被初始化
            </summary>
        </member>
        <member name="P:Speech.Engine.NextG.RecEngine.CurrentSetting">
            <summary>
            NextG相关配置
            </summary>
        </member>
        <member name="T:Speech.Engine.NextG.RecEngine.NextGResCategoryId">
            <summary>
            引擎资源名称
            </summary>
        </member>
        <member name="F:Speech.Engine.NextG.RecEngine.NextGResCategoryId.WFST">
            <summary>
            
            </summary>
        </member>
        <member name="F:Speech.Engine.NextG.RecEngine.NextGResCategoryId.HMM_8K">
            <summary>
            8K声学
            </summary>
        </member>
        <member name="F:Speech.Engine.NextG.RecEngine.NextGResCategoryId.HMM_16K">
            <summary>
            
            </summary>
        </member>
        <member name="F:Speech.Engine.NextG.RecEngine.NextGResCategoryId.FSAT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Speech.Engine.NextG.RecEngine.NextGResCategoryId.PERSONAL">
            <summary>
            热词包资源
            </summary>
        </member>
        <member name="F:Speech.Engine.NextG.RecEngine.NextGResCategoryId.LM">
            <summary>
            语音模型
            </summary>
        </member>
        <member name="T:Speech.Engine.NextG.VadEngine">
             <summary>
             该类是引擎环境控制类，主要用于对引擎的加载初始化与逆初始化。
            初始化与逆初始化在应用中只能做一次，所以该类的使用应放在应用程序的启动与退出场景中。
             </summary>
        </member>
        <member name="F:Speech.Engine.NextG.VadEngine._hasInitialize">
            <summary>
            用于标识引擎是否已被初始化。对引擎初始化与逆初始化时，需要对该域值做同步，防止被初始化多次。
            </summary>
        </member>
        <member name="F:Speech.Engine.NextG.VadEngine._strEnginePath">
            <summary>
            当前引擎接口所安装在磁盘中的位置
            </summary>
        </member>
        <member name="F:Speech.Engine.NextG.VadEngine._synRoot">
            <summary>
            内部操作同步对象
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.VadEngine.Initialize(System.String)">
            <summary>
            对引擎进行初始化
            </summary>
        </member>
        <member name="M:Speech.Engine.NextG.VadEngine.Uninitialize">
            <summary>
            逆初始化引擎
            </summary>
        </member>
        <member name="P:Speech.Engine.NextG.VadEngine.HasInitialize">
            <summary>
            引擎是否已被初始化
            </summary>
        </member>
        <member name="T:BEye.Engine.Psola.PsolaApi">
            <summary>
            语音活动检测处理系统（Voice Activation Detection）
            消除语音中的长时间静音期
            </summary>
        </member>
        <member name="F:BEye.Engine.Psola.PsolaApi.psolaEnginePath">
            <summary>
            引擎所在的位置
            </summary>        
        </member>
        <member name="M:BEye.Engine.Psola.PsolaApi.Psola(System.Byte[],System.IntPtr@,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32@)">
            <summary>
            基频同步叠加
            </summary>
            <param name="audiodatainput">输入数据(必须是16bit PCM)</param>
            <param name="audiodataoutput">输出数据(16bit PCM)</param>
            <param name="nSampleRate">输入语音的采样率</param>
            <param name="nSize">输入语音长度（采样点数）</param>
            <param name="f_DurRate">时域PSOLA算法（TD-PSOLA）系数 大于1时加速播放 小于1时减速播放</param>
            <param name="f_F0Rate">频域PSOLA算法（FD-PSOLA）系数 大于1时提高基频 小于1时降低基频</param>
            <param name="fDownSample">0 不做处理 1 保留2 输出调试信息</param>
            <param name="nRetSize">返回数据的大小 采样点数</param>
            <returns>0:成功 -1:失败</returns>
        </member>
        <member name="M:BEye.Engine.Psola.PsolaApi.FreeData(System.IntPtr)">
            <summary>
            释放基频同步叠加的内存空间
            </summary>
            <param name="audiodata">各个单通道语音的指针地址</param>
        </member>
        <member name="T:BEye.Engine.Psola.PsolaWorker">
            <summary>
            语音活动检测对象
            </summary>
        </member>
        <member name="M:BEye.Engine.Psola.PsolaWorker.DoPsola(System.Byte[])">
            <summary>
            进行基频同步叠加
            </summary>
            <param name="data">语音数据</param>
            <returns>语音数据对象</returns>
        </member>
        <member name="M:Speech.Engine.Utils.IniFileOperate.WriteString(System.String,System.String,System.String)">
            <summary>
            向ini文件中写入数据
            </summary>
            <param name="Section">配置节名称</param>
            <param name="Ident">配置项Key</param>
            <param name="Value">配置值</param>
        </member>
        <member name="M:Speech.Engine.Utils.IniFileOperate.ReadString(System.String,System.String,System.String)">
            <summary>
            读取INI文件指定节下的配置项的字符串值
            </summary>
            <param name="Section">配置节名称</param>
            <param name="Ident">配置项Key</param>
            <param name="Default">默认的配置项值</param>
            <returns>配置项字符串值</returns>
        </member>
        <member name="M:Speech.Engine.Utils.IniFileOperate.ReadInteger(System.String,System.String,System.Int32)">
            <summary>
            读取INI文件指定节下的配置项的字符串值
            </summary>
            <param name="Section">配置节名称</param>
            <param name="Ident">配置项Key</param>
            <param name="Default">默认的配置项值</param>
            <returns>配置项字符串值</returns>
        </member>
        <member name="M:Speech.Engine.Utils.IniFileOperate.WriteInteger(System.String,System.String,System.Int32)">
            <summary>
            向ini文件中写入数据
            </summary>
            <param name="Section">配置节名称</param>
            <param name="Ident">配置项Key</param>
            <param name="Value">配置值</param>
        </member>
        <member name="M:Speech.Engine.Utils.IniFileOperate.ReadBool(System.String,System.String,System.Boolean)">
            <summary>
            读取INI文件指定节下的配置项的布尔值
            </summary>
            <param name="Section">配置节名称</param>
            <param name="Ident">配置项Key</param>
            <param name="Default">默认的配置项值</param>
            <returns>配置项字符串值</returns>
        </member>
        <member name="P:Speech.Engine.Utils.IniFileOperate.IniFileName">
            <summary>
            ini文件的名称(含路径)
            </summary>
        </member>
        <member name="T:Speech.Engine.Vad.Exceptions.VadErrors">
            <summary>
            
            </summary>
        </member>
        <member name="F:Speech.Engine.Vad.Exceptions.VadErrors.Engine_SUCCESS">
            <summary>
            function completed successfully
            </summary>
        </member>
        <member name="T:Speech.Engine.Vad.Exceptions.VadException">
            <summary>
            VSPP 引擎异常
            </summary>
        </member>
        <member name="M:Speech.Engine.Vad.Exceptions.VadException.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.Vad.Exceptions.VadException"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.Vad.Exceptions.VadException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.Vad.Exceptions.VadException"/> class with
            the specified message.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.Vad.Exceptions.VadException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            <para>默认不可重试、恢复</para>
            </summary>
            <param name="message">A message to include with the exception.</param>
            <param name="innerException">A nested exception to include.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.Vad.Exceptions.VadException"/> class
            with the specified message and inner exception.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.Vad.Exceptions.VadException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="isReparable">是否可以重试、恢复</param>
        </member>
        <member name="M:Speech.Engine.Vad.Exceptions.VadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            为序列化提供的构造函数
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:BEye.Engine.Vad.VadAmrWorker">
            <summary>
            语音活动检测对象
            </summary>
        </member>
        <member name="M:BEye.Engine.Vad.VadAmrWorker.GetVsppData(Speech.Engine.Vspp.Data.VsppDataAudio)">
            <summary>
            获取语音活动检测语音段的标记信息
            </summary>
            <param name="audioData">语音数据对象</param>
            <returns>语音数据对象</returns>
        </member>
        <member name="T:BEye.Engine.Vad.VadApi">
            <summary>
            语音活动检测处理系统（Voice Activation Detection）
            消除语音中的长时间静音期
            </summary>
        </member>
        <member name="F:BEye.Engine.Vad.VadApi.vadEnginePath">
            <summary>
            引擎所在的位置
            </summary>        
        </member>
        <member name="M:BEye.Engine.Vad.VadApi.VADAudioWrite(System.Byte[],System.String,System.Int32)">
            <summary>
            将语音数据写入引擎，为计算结果做准备
            </summary>
            <param name="audio_data">音频数据</param>
            <param name="audio_type">
            音频数据格式<para></para>
            “audio/basic”			格式为 8k U-law
            “audio/basic; rate=16000”		格式为 16k U-law
            “audio/x-alaw-basic”			格式为 8k A-law
            “audio/x-alaw-basic;rate=16000”	格式为 16k A-law
            “audio/L16;rate=8000”		格式为 8k16bit PCM
            “audio/L16;rate=16000”		格式为16k-16bit PCM
            </param>        
            <param name="len_bytes">音频数据的长度，字节为单位</param>
            <returns></returns>
            <remarks>
            int VADAPI VADAudioWrite(const void* data, const wchar_t* audio_type, unsigned int len_bytes);
            </remarks>
        </member>
        <member name="M:BEye.Engine.Vad.VadApi.VADGetResult(System.IntPtr@,System.Int32@)">
            <summary>
            获取去铃音和语音分离后得到的语音片段标记结果
            </summary>
            <param name="result_pointer">返回结果，结果采用XML格式的字符串开始的指针</param>
            <param name="len_bytes">去铃音和语音分离后得到的语音片段的长度</param>
            <returns></returns>
            <remarks>
            int VADAPI VADGetResult(const char** result,   unsigned int* len_bytes);
            </remarks>
        </member>
        <member name="T:Speech.Engine.Vspp.AudioSplitWorker">
            <summary>
            语音分离引擎工作对象
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.AudioSplitWorker.Stereo2Mone(System.String,Speech.Data.AudioFormat)">
            <summary>
            立体音转成单声道合路
            </summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.AudioSplitWorker.SplitStereo2Mone(System.String,Speech.Data.AudioFormat,System.Boolean)">
            <summary>
            将双通道语音分离为至多两个通道语音;
            </summary>
            <param name="fullName">原始文件名称</param>
            <param name="isDenoise">A通道语音数据</param> 
            <returns>当前语音的通道数</returns>
        </member>
        <member name="T:Speech.Engine.Vspp.WavConvertType">
            <summary>
            WavConvert Type
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.WavConvertType.Header">
            <summary>
            有头
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.WavConvertType.MonoAlaw">
            <summary>
            无头单通道语音8K Alaw
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.WavConvertType.MonoUlaw">
            <summary>
            无头单通道语音8K Ulaw
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.WavConvertType.MonoPcm">
            <summary>
            无头单通道语音8K Pcm
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.WavConvertType.StereoAlaw">
            <summary>
            无头双通道语音8K Alaw
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.WavConvertType.StereoUlaw">
            <summary>
            无头双通道语音8K Ulaw
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.WavConvertType.StereoPcm">
            <summary>
            无头双通道语音8K
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.PlpHtkWorker">
            <summary>
            PlpHtkWorker
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.PlpHtkWorker.Convert43DPlp2HTKFea(System.Byte[],System.Boolean)">
            <summary>
            将43维 Plp特征数据转换为HTK格式特征，语音识别中使用43维数据
            <para></para>需要进行高低字节转换
            </summary>
            <param name="plp43Dfea">43维的plp特征数据</param>
            <param name="isNeedHtkHeader">是否需要Htk数据格式头</param>
            <returns></returns>
            <remarks>
            注意与PlpHTKHandle.AddPlpHTKHeader(byte[])的区别为：
            PlpHTKHandle.AddPlpHTKHeader(byte[]) 用于声纹plp，此处用于语音识别plp，
            两者维度不相同声纹plp 39维，语音识别plp 43维
            </remarks>
        </member>
        <member name="M:Speech.Engine.Vspp.PlpHtkWorker.Convert39DPlp2HtkFea(System.Byte[],System.Boolean)">
            <summary>
            39维特征数据Htk格式转换,声纹识别中使用39维特征数据
            </summary>
            <param name="plp39DFea">39维plp特征数据</param>
            <param name="isNeedHtkHeader">是否需要Htk头</param>
            <remarks>
            声纹识别特征提取,先进行一次特征提取,得到一个13维的特征数据;
            然后进行两次的delta差分运算,没进行一次纬度增加13,两次差分运算后,得到39维的特征数据;
            因此声纹可以看成是3次差分运算来进行纬度数计算;
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.PlpHtkWorker.WriterHtkHeader(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int16,System.Boolean)">
            <summary>
            写入Htk文件头
            </summary>
            <param name="ndim">特征纬度</param>
            <param name="frame_timelen">每帧时长(ms),一般为:10ms;Htk头中转换为以100ns为单位</param>
            <param name="num_frames">特征的帧数</param>
            <param name="parmKind">htk的类型 a code indicating the sample kind (2-byte integer)</param>
            <param name="htkPlpDataStream">特征头需要写入的流</param>
        </member>
        <member name="M:Speech.Engine.Vspp.PlpHtkWorker.swap_32(System.Int32)">
            <summary>
            int值字节序转换
            </summary>
            <param name="int32"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.PlpHtkWorker.swap_16(System.Int16)">
            <summary>
            short值字节序转换
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.PlpHtkWorker.swap_float_ptr(System.Byte[],System.Int32)">
            <summary>
            字节序转换
            </summary>
            <param name="float_bytes_ptr">待字节序转换的字节数组</param>
            <param name="fea_float_size"></param>
            <returns></returns>
        </member>
        <member name="T:Speech.Engine.Vspp.VsppFeaWorker">
            <summary>
            语音特征提取 工作者(相当于一个线程)
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.Core.VsppWorkerBase">
            <summary>
            预处理工作者基类(相当于一个线程)
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.Core.EngineWorkerBase">
            <summary>
            引擎Worker基类
            <para>统一引擎数据写入</para>
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.EngineWorkerBase.DoAudioWrite(Speech.Engine.Vspp.Data.VsppDataAudio)">
            <summary>
            执行引擎计算数据写入
            <para>只执行单个数据写入,写入数据前,会清空引擎实例数据缓冲区</para>
            <para>默认写入的数据是语音音频数据</para>
            </summary>
            <param name="audioFormat">语音数据格式</param>
            <param name="audioData">语音数据</param>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.EngineWorkerBase.DoBatchAudioWrite(Speech.Data.AudioFormat,System.Collections.Generic.IEnumerable{Speech.Engine.Vspp.Data.VsppData})">
            <summary>
            进行批量引擎数据写入
            </summary>
            <param name="audioFormat">语音格式</param>
            <param name="dataList">写入的引擎数据</param>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.EngineWorkerBase.DoBatchDatasToEngine(System.Collections.Generic.List{Speech.Engine.Vspp.Core.WriteAudioData})">
            <summary>
            将各引擎所需的计算数据写入具体的引擎中
            <para>由各引擎自身的Worker来实现</para>
            </summary>
            <param name="datalist"></param>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.EngineWorkerBase.DoPushDataToEngine(Speech.Engine.Vspp.Core.WriteAudioData)">
            <summary>
            将各引擎所需的计算数据写入具体的引擎中
            <para>由各引擎自身的Worker来实现</para>
            </summary>
            <param name="audioData">需要写入引擎的数据项</param>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.VsppWorkerBase.#ctor(Speech.Engine.Vspp.Data.WorkMode)">
            <summary>
            预处理工作者基类
            </summary>
            <param name="workMode">工作模式</param>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.VsppWorkerBase.GetVsppDataTag(Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.VsppDataTag)">
            <summary>
            获取 VsppTag
            <para></para>
            </summary>
            <param name="audioData"></param>
            <param name="tagData">外部替换的tag</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.VsppWorkerBase.DoPushDataToEngine(Speech.Engine.Vspp.Core.WriteAudioData)">
            <summary>
            向引擎写入数据
            </summary>
            <param name="item">audio列表</param>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.VsppWorkerBase.GetVsppDataTag">
            <summary>
            读取SPP tag
            <para>TODO: 添加耗时日志</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.VsppWorkerBase.GetOriginalAudioData(System.String)">
            <summary>
            获取转换后的 A8k_16bit_PCM 格式的原始语音数据，
            <para>一定要先调用 VsppAction或GetVsppDataTag后才能获取原始语音数据</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.VsppWorkerBase.GetOriginalAudioDataBuffer">
            <summary>
            获取转换后的 A8k_16bit_PCM 格式的原始语音数据，
            <para>一定要先调用 VsppAction或GetVsppDataTag后才能获取原始语音数据</para>
            </summary>
            <returns></returns>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.VsppWorkerBase.WavHeaderLength">
            <summary>
            Wav文件头长度
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppFeaWorker.#ctor(Speech.Engine.Vspp.Data.WorkMode)">
            <summary>
            语音特征提取 工作者
            </summary>
            <param name="workMode">工作模式</param>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppFeaWorker.VsppAction(Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.VsppDataTag)">
            <summary>
            VsppAction
            </summary>
            <param name="audioData"></param>
            <param name="tagData">外部替换的Tag</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppFeaWorker.VsppAction(Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.VsppDataTag@)">
            <summary>
            VsppAction
            </summary>
            <param name="audioData"></param>
            <param name="tagData"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppFeaWorker.VsppAction(Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.VsppDataTag@,Speech.Engine.Vspp.Data.ClusterIndex)">
            <summary>
            VsppAction
            </summary>
            <param name="audioData"></param>
            <param name="tagData"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppFeaWorker.QVsppAction(Speech.Engine.Vspp.Data.VsppDataAudio)">
            <summary>
            按 去铃音和场景分离 工作模式 获取 语音 语音特征 数据
            </summary>
            <param name="audioData"></param> 
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppFeaWorker.QVsppAction(Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.WorkMode)">
            <summary>
            按指定工作模式获取 语音 语音特征 数据
            </summary>
            <param name="audioData"></param>
            <param name="workMode"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppFeaWorker.QVsppAction(Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.WorkMode,Speech.Engine.Vspp.Data.VsppDataTag@)">
            <summary>
            按指定工作模式获取 语音 语音特征 数据
            </summary>
            <param name="audioData"></param>
            <param name="workMode"></param>
            <param name="tagData"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppFeaWorker.QVsppAction(Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.VsppDataTag)">
            <summary>
            根据tagData获取 指定音频的 Fea
            </summary>
            <param name="audioData">音频数据</param>
            <param name="tagData">指定的tag</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppFeaWorker.QVsppAction(System.Collections.Generic.List{Speech.Engine.Vspp.Data.VsppDataAudio})">
            <summary>
            多个语音,合成一个语音，提取一个Fea特征
            </summary>
            <param name="audioDatas"></param>
            <returns></returns>
        </member>
        <member name="T:Speech.Engine.Vspp.VsppTagWorker">
            <summary>
            语音片段提取 工作者(相当于一个线程)
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppTagWorker.#ctor(Speech.Engine.Vspp.Data.WorkMode)">
            <summary>
            语音片段提取 工作者
            </summary>
            <param name="workMode">工作模式</param>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppTagWorker.VsppAction(Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.VsppDataTag)">
            <summary>
            获取 VsppTag
            <para></para>
            </summary> 
            <param name="audioData"></param>
            <param name="tagData">外部替换的tag</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppTagWorker.VsppAction(Speech.Engine.Vspp.Data.VsppDataAudio)">
            <summary>
            获取 VsppTag
            </summary>
            <param name="audioData"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppTagWorker.QVsppAction(Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.WorkMode)">
            <summary>
            按指定工作模式获取 语音 语音片段 数据
            </summary>
            <param name="audioData"></param>
            <param name="workMode"></param>
            <returns></returns>
        </member>
        <member name="T:Speech.Engine.Vspp.VsppSplitWorker">
            <summary>
            语音分离 工作者(相当于一个线程)
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppSplitWorker.#ctor">
            <summary>
            语音分离 工作者 
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppSplitWorker.#ctor(Speech.Engine.Vspp.Data.WorkMode)">
            <summary>
            语音分离 工作者
            </summary>
            <param name="workMode">工作模式</param>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppSplitWorker.VsppAction(Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.VsppDataTag@)">
            <summary>
            
            </summary>
            <param name="audioData"></param>
            <param name="tagData"></param>
            <param name="isGetOriginalAudio">是否获取转码后的原始语音流(8K16bit)</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppSplitWorker.VsppAction(Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.ClusterIndex,System.String)">
            <summary>
            根据指定的 tagXml 获取，指定AB面的 分离的语音
            </summary>
            <param name="audioData">音频数据</param>
            <param name="index">说话人簇索引</param>
            <param name="tagXml"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppSplitWorker.VsppAction(Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.ClusterIndex)">
            <summary>
            根据指定A B面的 分离的语音
            </summary>
            <param name="audioData"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppSplitWorker.QVsppAction(Speech.Engine.Vspp.Data.VsppDataAudio,System.String)">
            <summary>
            根据
            </summary>
            <param name="audioData"></param>
            <param name="tagXml"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppSplitWorker.QVsppAction(Speech.Engine.Vspp.Data.VsppDataAudio,Speech.Engine.Vspp.Data.WorkMode,Speech.Engine.Vspp.Data.VsppDataTag@)">
            <summary>
            获取分割后的语音及音频Tag
            </summary>
            <param name="audioData">需要进行处理的Vspp数据</param>
            <param name="tagData">处理完成的Tag数据</param>
            <returns>分割后的语音</returns>
        </member>
        <member name="T:Speech.Engine.Vspp.VsppEngine">
             <summary>
             该类是引擎环境控制类，主要用于对引擎的加载初始化与逆初始化。
            初始化与逆初始化在应用中只能做一次，所以该类的使用应放在应用程序的启动与退出场景中。
             </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.VsppEngine._hasInitialize">
            <summary>
            用于标识引擎是否已被初始化。对引擎初始化与逆初始化时，需要对该域值做同步，防止被初始化多次。
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.VsppEngine._strEnginePath">
            <summary>
            当前引擎接口所安装在磁盘中的位置
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.VsppEngine._synRoot">
            <summary>
            内部操作同步对象
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppEngine.Initialize(System.String)">
            <summary>
            对引擎进行初始化
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.VsppEngine.Uninitialize">
            <summary>
            逆初始化引擎
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.VsppEngine.HasInitialize">
            <summary>
            引擎是否已被初始化
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.Core.WavConvertApi">
            <summary>
            讯飞声纹语音预处理系统（Verifier speech pre-process）
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.WavConvertApi._ConvertEnginePath">
            <summary>
            引擎所在的位置
            </summary>   
        </member>
        <member name="M:Speech.Engine.Vspp.Core.WavConvertApi.PWavConvert(System.String,System.IntPtr@,System.IntPtr@,System.Int32,System.Int32@,System.Int32@,System.Int32)">
            <summary>
            进行双通道语音解码支持K Alaw Ulaw ，有头的文件会自动读头，默认输入为alaw
            <para>支持进行语言转码</para>
            </summary>
            <param name="in_path">[传入]文件路径</param>
            <param name="audiodataA">[传出]A通道语音</param>
            <param name="audiodataB">[传出]B通道语音</param>
            <param name="type">
            [传入]原始语音格式类型
            type=0	有头文件
            type=6	"ALAW" 无头单通道语音8K
            type=7	"ULAW" 无头单通道语音8K
            type=1	"PCM"  无头单通道语音8K
            type=62	"ALAW" 无头双通道语音8K
            type=72	"ULAW" 无头双通道语音8K
            type=12	"PCM"  无头双通道语音8K
            </param>
            <param name="nChannel">[传出]原始语音通道数</param>
            <param name="audiosize">[传出]原始语音每个通道大小(双字节数量)</param>
            <param name="denoise_flag">是否去脉冲噪声的标志，0表示只转换不去噪，1表示转换并去噪</param>
            <returns>
            0  处理成功;
            -1 处理不成功;
            -2 输入语音采样率错误不是或
            </returns>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.WavConvertApi.FreeData(System.IntPtr)">
            <summary>
            释放分解双通道语音的内存空间
            </summary>
            <param name="audiodata">各个单通道语音的指针地址</param>
        </member>
        <member name="T:Speech.Engine.Lid.Exceptions.LidErrors">
            <summary>
            
            </summary>
        </member>
        <member name="F:Speech.Engine.Lid.Exceptions.LidErrors.Engine_SUCCESS">
            <summary>
            function completed successfully
            </summary>
        </member>
        <member name="T:Speech.Engine.Lid.Exceptions.LidException">
            <summary>
            VSPP 引擎异常
            </summary>
        </member>
        <member name="M:Speech.Engine.Lid.Exceptions.LidException.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.Lid.Exceptions.LidException"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.Lid.Exceptions.LidException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.Lid.Exceptions.LidException"/> class with
            the specified message.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.Lid.Exceptions.LidException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            <para>默认不可重试、恢复</para>
            </summary>
            <param name="message">A message to include with the exception.</param>
            <param name="innerException">A nested exception to include.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.Lid.Exceptions.LidException"/> class
            with the specified message and inner exception.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.Lid.Exceptions.LidException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="isReparable">是否可以重试、恢复</param>
        </member>
        <member name="M:Speech.Engine.Lid.Exceptions.LidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            为序列化提供的构造函数
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Speech.Engine.HTKExt.swap_32(System.Int32)">
            <summary>
            int值字节序转换
            </summary>
            <param name="int32"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.HTKExt.swap_16(System.Int16)">
            <summary>
            short值字节序转换
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="T:Speech.Engine.ClassExtensions">
            <summary>
            扩展方法 
            </summary>
        </member>
        <member name="M:Speech.Engine.ClassExtensions.AjustAudioData(System.Byte[],System.Int64)">
            <summary>
            调整大小：超过一定大小的文件直接截断
            </summary>
            <param name="audioData">语音数据</param>
            <param name="ajustedDataSize">调整后的大小</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.ClassExtensions.AjustAudioData(System.Byte[],System.Int64,System.Int64)">
            <summary>
            调整大小：超过一定大小的文件直接截断
            </summary>
            <param name="audioData">语音数据</param>
            <param name="startindex">数据开始的索引</param>
            <param name="ajustedDataSize">调整后的大小</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.ClassExtensions.TrimString(System.String,System.Int32)">
            <summary>
            截取指定长度的字符串，如果多于后面添加...
            </summary>
            <param name="longString"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.ClassExtensions.ComputeFormula(System.String)">
            <summary>
            公式计算
            </summary>
            <param name="formula"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.ClassExtensions.Clone``1(``0)">
            <summary>
            自定义的克隆：Clones an object by using the
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.ClassExtensions.IsGuid(System.String)">
            <summary>
            是否是Guid
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.ClassExtensions.IsEven(System.Int32)">
            <summary>
            是否是偶数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.ClassExtensions.ToInt(System.Boolean)">
            <summary>
            bool类型扩展.
            <para>True:返回 1 </para>
            <para>False:返回 0 </para>
            </summary>
            <param name="boolObj"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.ClassExtensions.ToIntString(System.Boolean)">
            <summary>
            返回字符串型的布尔值;
            <para>True:返回 1 </para>
            <para>False:返回 0 </para>
            </summary>
            <param name="boolObj"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.ClassExtensions.IsNotNull(System.Object)">
            <summary>
            扩展Object.判断当前对象是否不为空
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.ClassExtensions.IsNull(System.Object)">
            <summary>
            扩展Object. 判断当前对象是否为空
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.ClassExtensions.IsNullOrEmpty(System.Guid)">
            <summary>
            判断 Guid 对象是否为空，对Null和Guid.Empty进行了出来。
            <para>(instance == null) || (instance == Guid.Empty)</para>
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.ClassExtensions.Join(System.Collections.Generic.List{System.String})">
            <summary>
            字符串连接[连接符：默认逗号]
            </summary>
            <param name="src">字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.ClassExtensions.Join(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            字符串连接
            <para>去除最后的分隔符</para>
            </summary>
            <param name="src">字符串列表</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.ClassExtensions.Join(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>
            字符串连接
            <para>通过设置最后的标志位决定是否去除最后的分隔符</para>
            </summary>
            <param name="src">字符串列表</param>
            <param name="separator">分隔符</param>
            <param name="isTrimEndSeparator">是否去除最后的分隔符</param>
            <returns></returns>
        </member>
        <member name="T:Speech.Engine.StringClassExtensions">
            <summary>
            几个常用的String方法扩展
            </summary>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.CleanInvalidXmlChars(System.String)">
            <summary>
            清除xml中的无效字符 by lyhu
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.ToBytes(System.String)">
            <summary>
            字符串转换成byte 字节
            </summary>
            <param name="srcString"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.IsNullOrEmpty(System.String)">
            <summary>
            扩展String.IsNullOrEmpty
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.IsNotNullOrEmpty(System.String)">
            <summary>
            扩展String. 判断字符串是否不为空
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.Fill(System.String,System.Object[])">
            <summary>
            扩展String.Format
            </summary>
            <param name="format">模板字符串</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.FormatMilliSecond(System.Int64)">
            <summary>
            将毫秒格式化成：{0}分钟{0}秒
            </summary>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.FormatMilliSecond(System.Int32)">
            <summary>
            将毫秒格式化成：{0}分钟{0}秒
            </summary>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.FormatSecond(System.Int32)">
            <summary>
            将秒格式化成：{0}分钟{0}秒
            </summary>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.FormatDoubleSecond(System.Double)">
            <summary>
            将秒格式化成：{0}分钟{0}秒
            </summary>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.IsMatch(System.String,System.String)">
            <summary>
            字符串是否符合某正则表达式
            </summary>
            <param name="s"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.Match(System.String,System.String)">
            <summary>
            返回字符串通过正则表达式过滤后的字符串.
            </summary>
            <param name="s">原字符串</param>
            <param name="pattern">正则表达式</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.IsInt(System.String)">
            <summary>
            判断字符串是否是整型字符串
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.ToInt(System.String)">
            <summary>
            字符串转换为整型数据
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.IsDouble(System.String)">
            <summary>
            判断字符串是否是浮点数字符串
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.ToDouble(System.String)">
            <summary>
            字符串转换为浮点数字
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.ToFloat(System.String)">
            <summary>
            字符串转换为浮点数字
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.IsFloat(System.String)">
            <summary>
            判定字符串是否是单精度数字
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.ToIPAddress(System.String)">
            <summary>
            字符串IPAddress
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.IsLocal(System.Net.IPAddress)">
            <summary>
            是否是本机
            </summary>         
        </member>
        <member name="M:Speech.Engine.StringClassExtensions.IsValidEmail(System.String)">
            <summary>
            检测是否为有效邮件地址格式
            </summary>
            <param name="strIn">输入邮件地址</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Utils.DllInvoke.LoadLibrary(System.String)">
            <summary>
            加载动态连接库
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Utils.DllInvoke.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            获取指定的动态连接库函数的地址
            </summary>
            <param name="lib"></param>
            <param name="funcName"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Utils.DllInvoke.FreeLibrary(System.IntPtr)">
            <summary>
            释放动态连接库
            </summary>
            <param name="lib"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Utils.DllInvoke.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="DLLPath"></param>
        </member>
        <member name="M:Speech.Engine.Utils.DllInvoke.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:Speech.Engine.Utils.DllInvoke.Invoke(System.String,System.Type)">
            <summary>
            将要执行的函数转换为委托 
            </summary>
            <param name="APIName"></param>
            <param name="t"></param>
            <returns></returns>        
        </member>
        <member name="T:Speech.Engine.Vspp.Core.VsppApi">
            <summary>
            讯飞声纹语音预处理系统（Verifier speech pre-process）
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.VsppApi._VsppEnginePath">
            <summary>
            引擎所在的位置
            </summary>        
        </member>
        <member name="M:Speech.Engine.Vspp.Core.VsppApi.VSPPInitialize(System.String,System.String)">
            <summary>
            进程级全局初始化函数，初始化语音预处理相关资源<para></para>
            </summary>
            <param name="engine">传入需要初始化的引擎名称，可以为NULL，系统将自动查找需要初始化的引擎;</param>
            <param name="reserved">保留，必须为NULL</param>
            <returns>返回值	意义
            ISV_SUCCESS 成功<para></para>
            ISV_ERROR_BUSY	 已经初始化过了<para></para>
            ISV_ERROR_RES_MISSING	加载资源失败<para></para>
            ISV_ERROR_LOAD_MODULE	加载模块失败<para></para>
            </returns>
            <remarks>
            int  VSPPAPI VSPPInitialize(const wchar_t* engine, void * reserved)
            </remarks>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.VsppApi.VSPPCreateInst(System.IntPtr@,System.String)">
            <summary>
            创建一个语音预处理实例
            </summary>
            <param name="vst">由VSPPCreateInst创建的实例句柄</param>
            <param name="param_list"></param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_INVALID_PARA_VALUE	无效参数值<para></para>
            ISV_ERROR_INVALID_PARA	无效的参数<para></para>
            ISV_ERROR_NOT_INIT	没有初始化
            </returns>
            <remarks>
            int VSPPAPI VSPPCreateInst(VSPP_INST * vst, const wchar_t * params)
            </remarks>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.VsppApi.VSPPGetParam(System.IntPtr,System.String,System.String@,System.Int32@)">
            <summary>
            获得当前语音预处理实例的参数值
            </summary>
            <param name="vst">由VSPPCreateInst创建的实例句柄</param>
            <param name="param_name">参数类型，见VSPPCreateInst;</param>
            <param name="param_value">参数取值</param>
            <param name="length">结果长度</param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_INVALID_PARA	无效参数<para></para>
            ISV_ERROR_NO_ENOUGH_BUFFER	传入的缓冲区太小
            </returns>
            <remarks>
            int VSPPAPI VSPPGetParam(VSPP_INST vst, const wchar_t* param, wchar_t* value, unsigned int* len);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.VsppApi.VSPPSetParam(System.IntPtr,System.String,System.String)">
            <summary>
            设置当前语音预处理实例的参数
            </summary>
            <param name="vst">由VSPPCreateInst创建的实例句柄</param>
            <param name="param_name">参数类型，见VSPPCreateInst;</param>
            <param name="param_value">参数值</param>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_INVALID_PARA	无效参数<para></para>
            ISV_ERROR_INVALID_PARA_VALUE	无效的参数值
            </returns>
            <remarks>
            int VSPPAPI VSPPSetParam(VSPP_INST vst, const wchar_t* param, const wchar_t* value);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.VsppApi.VSPPAudioWrite(System.IntPtr,System.String,System.Byte[],System.Int32,Speech.Engine.Vspp.Core.WriteAudioState@)">
            <summary>
            将语音数据写入引擎，为计算结果做准备
            </summary>
            <param name="vst">由VSPPCreateInst创建的实例句柄</param>
            <param name="audio_type">
            音频数据格式<para></para>
            “audio/basic”			格式为 8k U-law
            “audio/basic; rate=16000”		格式为 16k U-law
            “audio/x-alaw-basic”			格式为 8k A-law
            “audio/x-alaw-basic;rate=16000”	格式为 16k A-law
            “audio/L16;rate=8000”		格式为 8k16bit PCM
            “audio/L16;rate=16000”		格式为16k-16bit PCM
            </param>
            <param name="audio_data">音频数据</param>
            <param name="len_bytes">音频数据的长度，字节为单位</param>
            <param name="status">
            VSPP_AUDIO_BEGIN：传入参数。表示清除引擎语音缓冲区，并开始传入当前语音数据。<para></para>
            VSPP_AUDIO _END：传入参数。表示所有传入数据结束。<para></para>
            VSPP_AUDIO_CONTINUE：传入参数。表示后继还有语音数据需要传入。<para></para>
            VSPP_AUDIO_FULL：传出参数。指示当前语音缓冲区已满。<para></para>
            VSPP_AUDIO_FILE_TAIL：传入参数。表示传入的一个语音文件结束。<para></para>
            VSPP_AUDIO_SPP_TAIL：表示之前传入的数据为语音片段标记信息。
            </param>
            <returns></returns>
            <remarks>
            int VSPPAPI VSPPAudioWrite(VSPP_INST vst, const wchar_t* audio_type, const void* data, unsigned int len_bytes, VSPPAudioStatus* status);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.VsppApi.VSPPGetResult(System.IntPtr,System.IntPtr@,System.Int32@,System.Int32,Speech.Engine.Vspp.Core.VsppResultState@)">
            <summary>
            获取去铃音和语音分离后得到的语音片段标记结果
            </summary>
            <param name="vst">由VSPPCreateInst创建的实例句柄</param>
            <param name="result_pointer">返回结果，结果采用XML格式的字符串开始的指针</param>
            <param name="len_bytes">去铃音和语音分离后得到的语音片段的长度</param>
            <param name="timeout_ms">超时值，小于0则等待直到处理成功或出错返回，大于等于0则等待，直到指定的毫秒时间到达（为0则立即返回），暂时不支持</param>
            <param name="status">
            VSPP_RESULT_NOT_BEGIN：传出参数。表示当前尚未开始计算。<para></para>
            VSPP_RESULT_COMPUTING：传入参数。表示还在计算处理过程中，还有数据需要计算。<para></para>
            VSPP_RESULT_STOP：传出参数。表示计算完成。<para></para>
            VSPP_RESULT_COMPLETE：传入传出参数。当作为传入参数时，通知引擎停止计算结果，用户不再继续获取结果。作为传出参数时，引擎通知用户当前结果是最后一个结果。<para></para>
            VSPP_RESULT_TIMEOUT：传出参数。超时标识。<para></para>
            </param>
            <returns></returns>
            <remarks>
            int VSPPAPI VSPPGetResult(VSPP_INST vst, const char** result, unsigned int* len_bytes, int timeout_ms, VSPPResultStatus* status);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.VsppApi.VSPPGetDataInfo(System.IntPtr,System.UInt32,System.String,System.IntPtr@)">
             <summary>
             获得当前语音预处理实例的参数值。
             <para>需要在VSPPGetResult之后进行</para>
             </summary>
             <param name="vst">由 VSTCreateInst创建的实例句柄； </param>
             <param name="data_idx">预处理的序号，即为结果中某一类的 cluster_id。 </param>
             <param name="param_names">
             字段参数，可以通过列表的形式传入多个查询字段，”gender;…” 
             <para>查询可以输入多个字段列表，没有明确的顺序要求，但是返回值则是按照上面列表的顺序返回，返回值形式为“gender=1;…”。 </para>
             </param>
             <param name="param_values">字段值： 
             <para>可查询的字段  取值  意义 </para>
             <para>gender  int  语音所属性别（1：男声，0：女声） </para>
            </param>
             <returns>
             如果函数调用成功返回 ISV_SUCCESS，否则返回错误代码，错误代码参见 isv_errors.h,
             可能的值如下：ISV_ERROR_INVALID_PARA 无效参数
             </returns>
             <remarks>
             int ISVAPI VSPPGetDataInfo(VSPP_INST vst, unsigned int data_idx , const wchar_t* params, const wchar_t ** values) 
             </remarks>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.VsppApi.VSPPGetPpData(System.IntPtr,System.Int32,Speech.Engine.Vspp.Data.VsppDataType,System.IntPtr@,System.Int32@)">
            <summary>
            获取预处理结果数据
            </summary>
            <param name="vst">由VSPPCreateInst创建的实例句柄</param>
            <param name="data_idx">预处理的序号，即为结果中某一类的cluster_id  -1:原始语音 0: 第一个人 1:第二个人</param>
            <param name="data_type">
            VSPP_DATA_AUDIO：表示获得这一类的所有语音，语音格式为(8k16bitWAV)。<para></para>
            VSPP_DATA_FEA：表示获得这一类语音的所有特征，如语音plp特征。<para></para>
            VSPP_DATA_UTR：表示获得语音和某种算法相关计算的中间结果。<para></para>
            </param>
            <param name="data_pointer">预处理所获得的二进制数据</param>
            <param name="len_bytes">
            返回的pp_data的长度。
            </param>
            <returns>
            ISV_ERROR_NOT_SUPPORT	需要获取的预处理数据值没有被支持<para></para>
            ISV_ERROR_NO_DATA	VSPPGetResult没有调用返回或没有正确返回<para></para>
            ISV_ERROR_NOT_INIT	没有初始化<para></para>
            </returns>
            <remarks>
            int VSPPAPI VSPPGetPpData(VSPP_INST vst, unsigned int data_idx, VSPPDataType data_type, const void** pp_data, unsigned int* len_bytes);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.VsppApi.VSPPDestroyInst(System.IntPtr)">
            <summary>
            销毁一个语音预处理实例，该实例由VSPPCreateInst生成
            </summary>
            <param name="vst">由VSPPCreateInst创建的实例句柄</param>
            <returns>实例号</returns>
            <remarks>
            ISV_SUCCESS<para></para>
            int VSPPAPI VSPPDestroyInst(VSPP_INST vst);
            </remarks>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.VsppApi.VSPPUninitialize">
            <summary>
            逆初始化并关闭声纹语音预处理系统，释放全局资源
            </summary>
            <returns>
            ISV_SUCCESS<para></para>
            ISV_ERROR_NOT_INIT	没有初始化
            </returns>
            <remarks>
            int VSPPAPI VSPPUninitialize();
            </remarks>
        </member>
        <member name="T:Speech.Engine.Vspp.Core.VsppAudioState">
            <summary>
            预处理语音输入的状态
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.VsppAudioState.VSPP_AUDIO_BEGIN">
            <summary>
            VSPP_AUDIO_BEGIN
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.VsppAudioState.VSPP_AUDIO_END">
            <summary>
            VSPP_AUDIO_END
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.VsppAudioState.VSPP_AUDIO_CONTINUE">
            <summary>
            VSPP_AUDIO_CONTINUE
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.VsppAudioState.VSPP_AUDIO_FULL">
            <summary>
            VSPP_AUDIO_FULL
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.VsppAudioState.VSPP_AUDIO_FILE_TAIL">
            <summary>
            VSPP_AUDIO_FILE_TAIL
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.VsppAudioState.VSPP_AUDIO_SPP_TAIL">
            <summary>
            VSPP_AUDIO_SPP_TAIL
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.Core.VsppResultState">
            <summary>
            预处理结果状态
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.VsppResultState.VSPP_RESULT_NOT_BEGIN">
            <summary>
            VSPP_RESULT_NOT_BEGIN
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.VsppResultState.VSPP_RESULT_COMPUTING">
            <summary>
            VSPP_RESULT_COMPUTING
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.VsppResultState.VSPP_RESULT_COMPLETE">
            <summary>
            VSPP_RESULT_COMPLETE
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.VsppResultState.VSPP_RESULT_TIMEOUT">
            <summary>
            VSPP_RESULT_TIMEOUT
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.VsppResultState.VSPP_RESULT_STOP">
            <summary>
            VSPP_RESULT_STOP
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.Core.VsppConfig">
            <summary>
            引擎内部配置
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.VsppConfig.#cctor">
            <summary>
            引擎内部配置
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Core.VsppConfig.AudioDataBlockSize">
            <summary>
            64KB
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Core.VsppConfig.AudioDataMaxSize">
            <summary>
            10MB
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.Core.WriteAudioData">
            <summary>
            写入引擎数据定义(AudioWrite)
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.WriteAudioData.#ctor(Speech.Engine.Vspp.Core.WriteAudioState,Speech.Data.AudioFormat,System.Byte[])">
            <summary>
            语种引擎写入数据
            </summary>
            <param name="state">状态参数</param>
            <param name="audioFormat">语音数据格式</param>
            <param name="dataBuffer">语音数据</param>
        </member>
        <member name="M:Speech.Engine.Vspp.Core.WriteAudioData.ToString">
            <summary>
            ToString()
            </summary>
            <returns> write_state={0};audio_format={1};data_length={2};</returns>
        </member>
        <member name="P:Speech.Engine.Vspp.Core.WriteAudioData.DataBuffer">
            <summary>
            [二进制流]
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Core.WriteAudioData.DataLength">
            <summary>
            [二进制流长度
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Core.WriteAudioData.AudioFormat">
            <summary>
            音频格式
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Core.WriteAudioData.WriteState">
            <summary>
            写入语音状态
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.Core.WriteAudioResultState">
            <summary>
            识别结果状态值枚举
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.WriteAudioResultState.RESULT_NOT_BEGIN">
            <summary>
            表示当前尚未开始计算
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.WriteAudioResultState.RESULT_COMPUTING">
            <summary>
            表示还在计算处理过程中，还有数据需要计算
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.WriteAudioResultState.RESULT_COMPLETE">
            <summary>
            表示计算完成
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.WriteAudioResultState.RESULT_TIMEOUT">
            <summary>
            超时标识
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.WriteAudioResultState.RESULT_STOP">
            <summary>
            当作为传入参数时，通知引擎停止计算结果，用户不再继续获取结果。作为传出参数时，引擎通知用户当前结果是最后一个结果
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.Core.WriteAudioState">
            <summary>
            引擎写入数据的状态枚举
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.WriteAudioState.WRITE_BEGIN">
            <summary>
            表示清除引擎语音缓冲区，并开始传入当前语音数据
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.WriteAudioState.WRITE_END">
            <summary>
            表示所有传入数据结束
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.WriteAudioState.WRITE_CONTINUE">
            <summary>
            表示后继还有语音数据需要传入
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.WriteAudioState.WRITE_FULL">
            <summary>
            传出参数。指示当前语音缓冲区已满
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.WriteAudioState.WRITE_FILE_TAIL">
            <summary>
            表示传入的一个语音文件结束
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.WriteAudioState.WRITE_SPP_TAIL">
            <summary>
            表示之前传入的数据为语音片段标记信息
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.WriteAudioState.WRITE_FEA_TAIL">
            <summary>
            表示之前传入的数据为语音特征信息
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Core.WriteAudioState.WRITE_UTR_TAIL">
            <summary>
            表示之前传入的数据为语音处理中间结果信息
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.Data.VsppData">
            <summary>
            预处理数据
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.VsppData.#ctor(System.Byte[])">
            <summary>
            引擎数据对象
            </summary>    
            <param name="data">引擎数据</param>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.VsppData.AjustDataBuffer(System.Int32)">
            <summary>
            调整大小：超过一定大小的文件直接截断
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.VsppData.ToString">
            <summary>
            DataType={0};DataLength={2}
            </summary>
            <returns>DataType={0};DataLength={2}</returns>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.VsppData.OriginalAudioFileName">
            <summary>
            原始的语音文件，主要是wav文件
            <para>带有扩展名，如：GF039_汪小三_CDMA_201005200857_C_BGS_denoise.wav</para>
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.VsppData.DataBuffer">
            <summary>
            【传入、传出】文件数据字节
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.VsppData.DataType">
            <summary>
            数据类型 
            <para>Audio|Fea|Utr|Tag </para>
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.VsppData.FileExtension">
            <summary>
            文件名扩展
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.VsppData.FileName">
            <summary>
            根据当前关联的原始的音频文件名、簇 Id、数据类型生成此VSPP产物的文件名
            <para>如：GF002测试语音_1.utr</para>
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.VsppDataExtend.IsValid(Speech.Engine.Vspp.Data.VsppData)">
            <summary>
            是否有效
            </summary>
            <param name="vsppData"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.VsppDataExtend.CheckValid(Speech.Engine.Vspp.Data.VsppData)">
            <summary>
            是否有效
            <para>如果无效数据，将抛VsppException</para>
            </summary>
            <param name="vsppData"></param>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.VsppDataExt.GetVsppData(System.String)">
            <summary>
            根据文件名称获取
            </summary>
            <param name="originalAudioFileName"></param>
            <returns></returns>
        </member>
        <member name="T:Speech.Engine.Vspp.Data.VsppDataAudio">
            <summary>
            VSPP处理数据_音频
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.VsppDataAudio.#ctor(System.Byte[])">
            <summary>
            默认 AudioFormat：A8k_A_law
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.VsppDataAudio.AudioFormat">
            <summary>
            语音文件音频数据格式        
            <para>缺省: audio/x-alaw-basic</para>
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.Data.VsppDataFea">
            <summary>
            音频特征数据
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.Data.VsppDataUtr">
            <summary>
            声纹识别中间计算结果
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.Data.VsppDataTag">
            <summary>
            音频片段数据
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.VsppDataTag.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.VsppDataTag.#ctor(System.String)">
            <summary>
            带参构造函数
            <para>基于Xml字符串构造</para>
            </summary>
            <param name="tagXml">Tag的Xml字符串</param>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.VsppDataTag.GetVadTag">
            <summary>
            获取片段数据对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Speech.Engine.Vspp.Data.VsppDataType">
            <summary>
            引擎处理过程中涉及到的数据类型
            <para>注意：顺序不要随意改变，因为，有处理逻辑是针对这个排序</para>
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.VsppDataType.Audio">
            <summary>
            语音数据
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.VsppDataType.Fea">
            <summary>
            语音特征数据
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.VsppDataType.Utr">
            <summary>
            中间计算结果数据
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.VsppDataType.Tag">
            <summary>
            tag标记xml
            <para>后补，非引擎接口提供</para>
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.Data.VadTag">
            <summary>
            语音片段数据 tag xml对象化
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.VadTag.#ctor(System.String)">
            <summary>
            语音片段数据 tag xml对象化
            </summary>
            <param name="xml">tag xml</param>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.VadTag.GetSegments(System.Int32)">
            <summary>
            获取某说话人(speakerNo) 的所有片段
            </summary>
            <param name="speakerNo">说话人</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.VadTag.GetValidTimeLen(System.Int32)">
            <summary>
            获取某说话人(speakerNo) 的有效时长
            <para>单位：毫秒</para>
            </summary>
            <param name="speakerNo">说话人</param>
            <returns>总的有效时长</returns>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.VadTag.GetValidTimeLen">
            <summary>
            获取总的有效时长
            <para>单位：毫秒</para>
            </summary>
            <returns>总的有效时长</returns>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.VadTag.CountGender(System.Int32)">
            <summary>
            获取指定说话人性别
            </summary>
            <param name="speakerNo"></param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.VadTag.CountGender">
            <summary>
            获取整句性别
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.VadTag.GetTagXmlByValidLen(System.Int32)">
            <summary>
            获取指定有效时长语音的Tag段
            </summary>
            <param name="valid_len">有效时长，单位：毫秒</param>
            <returns></returns>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.VadTag.ToString">
            <summary>
            复写 ToString()
            </summary>
            <returns>segment_count and speaker_num</returns>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.VadTag.ResultXml">
            <summary>
            SPP XML串
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.VadTag.Return">
            <summary>
            SPP XML串
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.VadTag.SegmentCount">
            <summary>
            片段条数
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.VadTag.SpeakerNum">
            <summary>
            说话人个数
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.VadTag.Segments">
            <summary>
            片段对象列表
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.Data.SegmentType">
            <summary>
            Segment段测试出来的类型
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.SegmentType.Voice">
            <summary>
            语音
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.SegmentType.Music">
            <summary>
            音乐
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.SegmentType.Mute">
            <summary>
            静音
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.SegmentType.Fax">
            <summary>
            传真音
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.SegmentType.DtmfKeyTone">
            <summary>
            dtmf按键音
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.SegmentType.DtmfBusyTone">
            <summary>
            dtmf忙音
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.SegmentType.DtmfBackTone">
            <summary>
            dtmf回铃音
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.SegmentType.Noise">
            <summary>
            噪音
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.Data.Segment">
            <summary>
            片段
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.Data.Segment.ToString">
            <summary>
            复写 ToString()
            </summary>
            <returns>cluster_id 、begin_time and end_time</returns>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.Segment.segment_type">
            <summary>
            片段类型
            <para>0-语音, 1-dtmf按键音, 2-音乐, 3-静音, 4-传真音, 5-dtmf忙音, 6-dtmf回铃音</para>
            <para>默认为 0-语音</para>
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.Segment.cluster_id">
            <summary>
            speaker index （A：0 | B：1）
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.Segment.Gender">
            <summary>
            Segment段性别信息
            <para>0-女声，1-男声</para>
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.Segment.begin_time">
            <summary>
            开始时间
            <para>单位：毫秒</para>
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.Segment.end_time">
            <summary>
            结束时间
            <para>单位：毫秒</para>
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.Segment.speech_score">
            <summary>
            语音得分
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.Segment.noise_score">
            <summary>
            噪音得分
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.Segment.faxtar_score">
            <summary>
            传真模型得分
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.Segment.faximp_score">
            <summary>
            非传真模型得分
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.Segment.male_score">
            <summary>
            男声得分
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.Segment.female_score">
            <summary>
            女声得分
            </summary>
        </member>
        <member name="P:Speech.Engine.Vspp.Data.Segment.time_len">
            <summary>
            片段时长
            <para>单位：毫秒</para>
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.Data.WorkMode">
            <summary>
            工作模式
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.WorkMode.All">
            <summary>
            0-表示做去铃音和场景分离
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.WorkMode.Ring">
            <summary>
            1-表示只做去铃音
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.WorkMode.Voice">
            <summary>
            2-表示只做场景分离
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.WorkMode.None">
            <summary>
            3-表示去铃音和场景分离都不做（可以去静音）
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.WorkMode.GmmVad">
            <summary>
            4-表示去做语音增强（适用于对特定环境噪音处理）
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.WorkMode.NewDenoise">
            <summary>
            5-Vspp定制版新VAD处理
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.WorkMode.Default">
            <summary>
            不设置工作模式，使用引擎配置 vspp.cfu
            </summary>        
        </member>
        <member name="T:Speech.Engine.Vspp.Data.ClusterIndex">
            <summary>
            簇号
            <para>说话人索引号:Original(-1),A(0),B(1)</para>
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.ClusterIndex.Original">
            <summary>
            8k16bit pcm
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.ClusterIndex.A">
            <summary>
            A
            </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Data.ClusterIndex.B">
            <summary>
            B
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.Exceptions.VsppErrors">
             <summary>
            The enumeration ISV_ERROR enumerates possible EngineError codes 
            <para></para>  ISV_ERROR_OUT_OF_MEMORY out of memory
            <para></para>  ISV_ERROR_FILE_NOT_FOUND file not found
            <para></para>  ISV_ERROR_NOT_SUPPORT operation not support
            <para></para>  ISV_ERROR_NOT_IMPLEMENT 
            <para></para>  ISV_ERROR_ACCESS access failed
            <para></para>  ISV_ERROR_INVALID_PARA invalid parameter
            <para></para>  ISV_ERROR_INVALID_PARA_VALUE invalid parameter value
            <para></para>  ISV_ERROR_INVALID_HANDLE invalid handle
            <para></para>  ISV_ERROR_INVALID_DATA invalid data
            <para></para>  ISV_ERROR_NO_LICENSE no license
            <para></para>  ISV_ERROR_NOT_INIT not initialize
            <para></para>  ISV_ERROR_NULL_HANDLE empty handle
            <para></para>  ISV_ERROR_OVERFLOW memory overflow
            <para></para>  ISV_ERROR_TIME_OUT time out
            <para></para>  ISV_ERROR_OPEN_FILE open file failed
            <para></para>  ISV_ERROR_NO_ENOUGH_BUFFER buffer not enough
            <para></para>  ISV_ERROR_NO_DATA no data
            <para></para>  ISV_ERROR_NEED_MORE_DATA need more data
            <para></para>  ISV_ERROR_RES_MISSING resource load failed
            <para></para>  ISV_ERROR_LOAD_MODULE load module failed
            <para></para>  ISV_ERROR_BUSY some operations already are in progress
            <para></para>  ISV_ERROR_INVALID_CONFIG invalid config
            <para></para>  ISV_ERROR_CANCELED operation is canceled
            <para></para>  ISV_ERROR_INVALID_MEDIA_TYPE audio type is not supported
            <para></para>  ISV_ERROR_NULL_PTR null pointer
            <para></para>  ISV_ERROR_NOT_BEGIN end before beginning
            <para></para>  ISV_ERROR_NO_TASK no task in inst
            <para></para>  ISV_ERROR_NOT_AUDIO_END start task before audio data is ready
            <para></para>  ISV_ERROR_VE_GENERAL verifier engine EngineError begin
            <para></para>  ISV_ERROR_VE_INVALID_FEATURE invalid feature data
            <para></para>  ISV_ERROR_VE_INVALID_MODEL invalid model data
            <para></para>  ISV_ERROR_VE_TRUNCATED utter is truncated
            <para></para>  ISV_ERROR_VE_MUCH_NOISE utter has too much noise
            <para></para>  ISV_ERROR_VE_VR_MODULE load vr module failed
            <para></para>  ISV_ERROR_VE_ADAPT_LOW_SCORE model after adapted get lower score
            <para></para>  ISV_ERROR_VE_UTTER_TOO_SHORT utter duration is not enough
            <para></para>  ISV_ERROR_VE_TEXT_LENGTH length of input text is invalid
            <para></para>  ISV_ERROR_VE_FEATURE_DIMENSION dimension of feature don't equal configure
            <para></para>  ISV_ERROR_VD_GENERAL verifier data-management EngineError begin
            <para></para>  ISV_ERROR_VD_INVALID_REPO invalid repository source
            <para></para>  ISV_ERROR_VD_INVALID_CONN_STR invalid connect string for specified repository
            <para></para>  ISV_ERROR_VD_USER_EXIST user already exist
            <para></para>  ISV_ERROR_VD_USER_NOT_EXIST user not exist
            <para></para>  ISV_ERROR_VD_RECORD_EXIST user record already exist
            <para></para>  ISV_ERROR_VD_RECORD_NOT_EXIST record for specified user not exist
            <para></para>  ISV_ERROR_VD_FEATURE_NOT_EXIST feature not exsit
            <para></para>  ISV_ERROR_VD_DB_INIT init database failed
            <para></para>  ISV_ERROR_VD_INVALID_ID_STR invalid odbc connection string
            <para></para>  ISV_ERROR_VD_MODEL_OUT_OF_DATE  updating voiceprint model  is out of date
            <para></para>  ISV_ERROR_VD_MODEL_EXIST voiceprint model has already been exist
            <para></para>  ISV_ERROR_VD_MODEL_NOT_EXIST voiceprint model not exist
            <para></para>  ISV_ERROR_VD_DB_EXCEPTION database IO exception
             </summary>
        </member>
        <member name="F:Speech.Engine.Vspp.Exceptions.VsppErrors.Engine_SUCCESS">
            <summary>
            function completed successfully
            </summary>
        </member>
        <member name="T:Speech.Engine.Vspp.Exceptions.VsppException">
            <summary>
            VSPP 引擎异常
            </summary>
        </member>
        <member name="M:Speech.Engine.Vspp.Exceptions.VsppException.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.Vspp.Exceptions.VsppException"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.Vspp.Exceptions.VsppException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.Vspp.Exceptions.VsppException"/> class with
            the specified message.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.Vspp.Exceptions.VsppException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            <para>默认不可重试、恢复</para>
            </summary>
            <param name="message">A message to include with the exception.</param>
            <param name="innerException">A nested exception to include.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Speech.Engine.Vspp.Exceptions.VsppException"/> class
            with the specified message and inner exception.
            </para>
            </remarks>
        </member>
        <member name="M:Speech.Engine.Vspp.Exceptions.VsppException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="isReparable">是否可以重试、恢复</param>
        </member>
        <member name="M:Speech.Engine.Vspp.Exceptions.VsppException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            为序列化提供的构造函数
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
    </members>
</doc>
